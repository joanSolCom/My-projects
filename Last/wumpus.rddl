domain wumpus {

	requirements = {
		reward-deterministic,
//		partially-observed,
		constrained-state
	};

	types {
      	square : object;
	};

	pvariables {

		// OBSERVATION PROBABILITIES
//		SMELLPROB: {non-fluent, real, default = 0.9};
//		GLITTERPROB: {non-fluent,real,default = 0.9};
//		BREEZEPROB: {non-fluent, real,default = 0.9};
//		DEADPROB: {non-fluent, real, default = 0.9};

		// TOPOLOGY 
		ADJACENT(square, square) : { non-fluent, bool, default = false };
	    GOLDAT(square) : { non-fluent, bool, default = false };
	    WUMPUSAT(square) : { non-fluent, bool, default = false };
	    PITAT(square) : { non-fluent, bool, default = false };

	    // STATE VARIABLES
	    isDead: { state-fluent, bool, default = false};
	    AmIDead: { state-fluent, bool, default=false};
	    gotArrow: { state-fluent, bool, default=true};
	    myPos(square): {state-fluent,bool,default=false};
	    isGlitter(square): { state-fluent, bool, default=false };
	    isSmelly(square): { state-fluent, bool, default=false };
	    isBreezy(square): { state-fluent, bool, default=false };

	    // OBSERVATION SET
//	    obsIsSmelly(square) : { observ-fluent, bool};
//	    obsIsBreezy(square) : { observ-fluent, bool};
//	    obsIsGlitter(square): { observ-fluent, bool};
//	    obsIsDead: { observ-fluent, bool};
		
		// ACTIONS
		move(square) : { action-fluent, bool, default = false };
	    grab(square) : { action-fluent, bool, default = false };
	    shoot(square): { action-fluent, bool, default = false };
	};

	cpfs {

		// EVOLUTION OF THE STATE VARIABLES

		isDead' = if((exists_{?x:square,?y:square}[myPos(?x) ^ WUMPUSAT(?y) ^ ADJACENT(?x,?y) ^ shoot(?y)]) ^ ~isDead)
					then KronDelta(true)
				  else
				  	KronDelta(false);

		// Makes this error:
		// Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 0, Size: 0

//		AmIDead' = if((exists_{?x:square}[myPos(?x) ^ (WUMPUSAT(?x) | PITAT(?x))]) ^ ~AmIDead)
//						then KronDelta(true)
//					else
//						KronDelta(false);

		gotArrow' = if(exists_{?x:square}[shoot(?x)])
						then KronDelta(false)
					else
						KronDelta(true);

		myPos'(?x) = if (myPos(?x)) then KronDelta(false)
                   	 else if(move(?x)) then KronDelta(true)
                   	 else KronDelta(false);

		isGlitter'(?x) = if(myPos(?x) ^ GOLDAT(?x))
					 		then KronDelta(grab(?x))
					 	 else
					 		KronDelta(false);

		isSmelly'(?x) = if(exists_{?y:square}[myPos(?x) ^ ADJACENT(?x,?y) ^ WUMPUSAT(?y)])
							then KronDelta(shoot(?y))
						else
						  	KronDelta(false);

		isBreezy'(?x) = if(exists_{?y:square}[myPos(?x) ^ ADJACENT(?x,?y) ^ PITAT(?y)])
							then KronDelta(true)
						else
						  	KronDelta(false);		 


		// OBSERVATIONS WE GET

//		obsIsGlitter(?x) = 	if(myPos(?x) ^ GOLDAT(?x))
//					 			then Bernoulli(GLITTERPROB)
//					 		else
//					 			Bernoulli(1 - GLITTERPROB);		 

//		obsIsSmelly(?x) = if(myPos(?x) ^ exists_{?y:square}[ADJACENT(?x,?y) ^ WUMPUSAT(?y)])
//								then Bernoulli(SMELLPROB)
//						  else
//						  		Bernoulli(1 - SMELLPROB);

//		obsIsBreezy(?x) = if(myPos(?x) ^ exists_{?y:square}[ADJACENT(?x,?y) ^ PITAT(?y)])
//								then Bernoulli(BREEZEPROB)
//						  else
//						  		Bernoulli(1 - BREEZEPROB);	

//		obsIsDead = if(exists_{?x:square,?y:square}[myPos(?x) ^ WUMPUSAT(?y) ^ ADJACENT(?x,?y) ^ shoot(?y)] ^ ~isDead)
//						then Bernoulli(DEADPROB)
//					else
//						Bernoulli(1-DEADPROB);		 
	};

	// REWARD FUNCTION. COMPONENTS:
	// +1000 Kill Wumpus
	// -1000 Die
	// +1000 For each piece of gold picked
	// -1 Step
	// -10 Using the arrow

	reward = (1000 * isDead) - (1000 * AmIDead) + (1000 * sum_{?x : square } [grab(?x) ^ GOLDAT(?x)]) - (1 * sum_{?y:square}[move(?y)]) - 10 * ~gotArrow ;

	state-action-constraints {

		forall_{?x:square}[move(?x) => ~myPos(?x) ^ exists_{?y:square}[myPos(?y) ^ ADJACENT(?x,?y)]];
		forall_{?x:square}[grab(?x) => myPos(?x) ^ GOLDAT(?x)];
		forall_{?x:square,?y:square}[shoot(?x) => myPos(?y) ^ ADJACENT(?x,?y)];
		(sum_{?x:square}[myPos(?x)]) == 1;
		//Gold only grabbed once!!
	};
}


non-fluents grid9 {

	domain = wumpus;

	objects {
		square : {c00, c01, c02, c10, c11, c12, c20, c21, c22};
	};

	non-fluents {

    WUMPUSAT(c22);
    GOLDAT(c11);
    PITAT(c02);

    ADJACENT(c00,c10);
    ADJACENT(c00,c01);

    ADJACENT(c01,c00);
	ADJACENT(c01,c11);
	ADJACENT(c01,c02);

	ADJACENT(c02,c01);
	ADJACENT(c02,c12);

	ADJACENT(c10,c00);
	ADJACENT(c10,c11);
	ADJACENT(c10,c20);

    ADJACENT(c11,c10);
    ADJACENT(c11,c01);
    ADJACENT(c11,c12);
    ADJACENT(c11,c21);

    ADJACENT(c12,c02);
    ADJACENT(c12,c11);
    ADJACENT(c12,c22);

    ADJACENT(c20,c10);
    ADJACENT(c20,c21);

    ADJACENT(c21,c20);
    ADJACENT(c21,c11);
    ADJACENT(c21,c22);

    ADJACENT(c22,c12);
    ADJACENT(c22,c21);
	};
}

instance inst_wumpus {

	domain = wumpus;

	non-fluents = grid9;

  	init-state {
		myPos(c00);
	};

	max-nondef-actions = 1;
	horizon  = 20;
	discount = 0.9;
}