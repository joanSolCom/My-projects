package dominio;
import java.awt.Color;
import java.awt.Image;
import java.util.List;
import javax.swing.ImageIcon;
import java.util.Vector;
import java.net.URL;

/**
 * @author Joan, Victor, Guillem
 *
 * Nota: Degut a l'extensi√≥ del fitxer,
 * indiquem individualment a cada funcio, qui
 * ha estat el creador.
 *
 * Cluster i Grup 8.2
 * Creat el 11-Maig-2010, 22:05
 *
 * Objectiu de la classe: Tenir un gui per a jugar al blackjack
 * Classes Utilitzades: ControladorPartidaBJ, ControladorRanking,IEBJ, GestorEstrategias
 */

public class guiE extends gui2 {

    /** Creates new form guiE */
    public guiE() {

        super();
        initComponents();
        PartidaGui.setVisible(false);
        ConfigJugadoresGui.setVisible(false);
        LoginGui2.setVisible(false);
        EstadisticasGui.setVisible(false);
        popupGui.setVisible(false);

    }//END_METODE

    /*Declaracion de variables Globales*/

    /*Variable que nos indica cuantos jugadores hay*/
    int nJug;

    /*Variables que nos indican que tipo de jugador son los 7 posibles*/
    String tipo1 = "";
    String tipo2 = "";
    String tipo3 = "";
    String tipo4 = "";
    String tipo5 = "";
    String tipo6 = "";
    String tipo7 = "";

    /*Un controlador de partida*/
    ControladorPartidaBJ cBJ = new ControladorPartidaBJ();
    /*Un humano*/
    Humano u = new Humano();
    /*Variable que controla que jugador estamos tratando*/
    int jugadorTratado = 0;
    /*Un color*/
    Color c;
    /*Variable que indica que jugador tiene el turno*/
    int jugadorActual = 0;
    /*Variable que indica que mano estamos tratando del jugadorActual*/
    int manoActual = 0;

    /*Un controlador de Ranking y uno de Usuario*/
    ControladorRankingE cRA = new ControladorRankingE();    
    ControladorUsuario cUSR = new ControladorUsuario();
            
    boolean asegurado = false;
    boolean ases = false;

    /*Un Inference Engine*/
    IEBJ ieb = null;

    /*Un vector per a controlar que no es loguegin dues vegades amb el mateix user*/
    Vector Users = new Vector();
    

    @Override
    public synchronized void setIconImages(List<? extends Image> icons) {
        super.setIconImages(icons);
    }


    @Override
    public void setIconImage(Image image) {
        super.setIconImage(image);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PartidaGui = new javax.swing.JPanel();
        CC2 = new javax.swing.JLabel();
        CC1 = new javax.swing.JLabel();
        aMinim = new javax.swing.JTextField();
        aMa = new javax.swing.JTextField();
        apmin = new javax.swing.JLabel();
        apmax = new javax.swing.JLabel();
        croupier = new javax.swing.JLabel();
        N1 = new javax.swing.JLabel();
        N2 = new javax.swing.JLabel();
        N3 = new javax.swing.JLabel();
        N4 = new javax.swing.JLabel();
        N5 = new javax.swing.JLabel();
        N6 = new javax.swing.JLabel();
        N7 = new javax.swing.JLabel();
        T1 = new javax.swing.JTextField();
        T2 = new javax.swing.JTextField();
        T3 = new javax.swing.JTextField();
        T4 = new javax.swing.JTextField();
        T5 = new javax.swing.JTextField();
        T6 = new javax.swing.JTextField();
        T7 = new javax.swing.JTextField();
        iniPartida = new javax.swing.JButton();
        abandPartida = new javax.swing.JButton();
        gPartida = new javax.swing.JButton();
        F1 = new javax.swing.JTextField();
        F2 = new javax.swing.JTextField();
        F3 = new javax.swing.JTextField();
        F4 = new javax.swing.JTextField();
        F5 = new javax.swing.JTextField();
        F6 = new javax.swing.JTextField();
        F7 = new javax.swing.JTextField();
        P1 = new javax.swing.JTextField();
        P2 = new javax.swing.JTextField();
        P3 = new javax.swing.JTextField();
        P4 = new javax.swing.JTextField();
        P5 = new javax.swing.JTextField();
        P6 = new javax.swing.JTextField();
        P7 = new javax.swing.JTextField();
        fichas = new javax.swing.JLabel();
        punt = new javax.swing.JLabel();
        hit = new javax.swing.JButton();
        doblar = new javax.swing.JButton();
        insurance = new javax.swing.JButton();
        split = new javax.swing.JButton();
        stand = new javax.swing.JButton();
        apuesta = new javax.swing.JTextField();
        apuest = new javax.swing.JLabel();
        apostar = new javax.swing.JButton();
        pCroup = new javax.swing.JTextField();
        aviso = new javax.swing.JLabel();
        CC3 = new javax.swing.JLabel();
        CC4 = new javax.swing.JLabel();
        CC5 = new javax.swing.JLabel();
        CC6 = new javax.swing.JLabel();
        CC7 = new javax.swing.JLabel();
        CJ2 = new javax.swing.JLabel();
        CJ9 = new javax.swing.JLabel();
        CJ3 = new javax.swing.JLabel();
        CJ4 = new javax.swing.JLabel();
        CJ5 = new javax.swing.JLabel();
        CJ6 = new javax.swing.JLabel();
        CJ7 = new javax.swing.JLabel();
        CJ1 = new javax.swing.JLabel();
        CJ8 = new javax.swing.JLabel();
        ConfigPartidaGui = new javax.swing.JPanel();
        aMin = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        aMax = new javax.swing.JTextField();
        jug = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        EstadisticasGui = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        retorno = new javax.swing.JButton();
        pganadas = new javax.swing.JLabel();
        pperdidas = new javax.swing.JLabel();
        pjugadas = new javax.swing.JLabel();
        pmedia = new javax.swing.JLabel();
        nbj = new javax.swing.JLabel();
        nemp = new javax.swing.JLabel();
        nsplit = new javax.swing.JLabel();
        adoblades = new javax.swing.JLabel();
        sutiliz = new javax.swing.JLabel();
        maxNfichas = new javax.swing.JLabel();
        PG = new javax.swing.JTextField();
        PP = new javax.swing.JTextField();
        PJ = new javax.swing.JTextField();
        PM = new javax.swing.JTextField();
        NB = new javax.swing.JTextField();
        NE = new javax.swing.JTextField();
        NS = new javax.swing.JTextField();
        AD = new javax.swing.JTextField();
        SU = new javax.swing.JTextField();
        MF = new javax.swing.JTextField();
        primbj = new javax.swing.JLabel();
        primmagan = new javax.swing.JLabel();
        empbj = new javax.swing.JLabel();
        qmang = new javax.swing.JLabel();
        qbj = new javax.swing.JLabel();
        gmcat = new javax.swing.JLabel();
        pcv = new javax.swing.JLabel();
        dsplit = new javax.swing.JLabel();
        ain = new javax.swing.JLabel();
        PB = new javax.swing.JTextField();
        PMG = new javax.swing.JTextField();
        EB = new javax.swing.JTextField();
        QM = new javax.swing.JTextField();
        QB = new javax.swing.JTextField();
        GC = new javax.swing.JTextField();
        PV = new javax.swing.JTextField();
        DS = new javax.swing.JTextField();
        AI = new javax.swing.JTextField();
        TA = new javax.swing.JTextField();
        tach = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        AyudaGui = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        nuevaPartida = new javax.swing.JButton();
        usuario = new javax.swing.JButton();
        ranking = new javax.swing.JButton();
        cargarPartida = new javax.swing.JButton();
        registrarayuda = new javax.swing.JButton();
        pantallaPrincipal = new javax.swing.JButton();
        creditos = new javax.swing.JButton();
        volver = new javax.swing.JButton();
        AyudaReglesBJ = new javax.swing.JButton();
        AyudaP = new javax.swing.JButton();
        popupGui = new javax.swing.JPanel();
        salSinG = new javax.swing.JButton();
        SalG = new javax.swing.JButton();
        titol = new javax.swing.JLabel();
        cancSalir = new javax.swing.JButton();
        GuardarGui = new javax.swing.JPanel();
        partidaGuardar = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        guardar = new javax.swing.JButton();
        cancelG = new javax.swing.JButton();
        avi = new javax.swing.JLabel();
        recuperarJugs = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        LJ1 = new javax.swing.JLabel();
        LJ2 = new javax.swing.JLabel();
        LJ3 = new javax.swing.JLabel();
        LJ4 = new javax.swing.JLabel();
        LJ5 = new javax.swing.JLabel();
        LJ6 = new javax.swing.JLabel();
        LJ7 = new javax.swing.JLabel();
        VJ1 = new javax.swing.JButton();
        VJ2 = new javax.swing.JButton();
        VJ3 = new javax.swing.JButton();
        VJ4 = new javax.swing.JButton();
        VJ5 = new javax.swing.JButton();
        VJ6 = new javax.swing.JButton();
        VJ7 = new javax.swing.JButton();
        jugar = new javax.swing.JButton();
        LoginGUI3 = new javax.swing.JPanel();
        cancelar3 = new javax.swing.JButton();
        pass1 = new javax.swing.JTextField();
        user1 = new javax.swing.JTextField();
        incorrecto1 = new javax.swing.JLabel();
        aceptar3 = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        CreditosGui = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        labelGrido = new javax.swing.JLabel();
        labelGuille = new javax.swing.JLabel();
        labelJoan = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        volv = new javax.swing.JButton();
        AyudaPantallaPrincipal = new javax.swing.JPanel();
        VolverAyudaPantallaPrincipal = new javax.swing.JButton();
        cap1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        AyudaNuevaPartida = new javax.swing.JPanel();
        VolverAyudaNuevaPartida = new javax.swing.JButton();
        cap2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        SiguienteAyudaNuevaPartida = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        AyudaConfJug = new javax.swing.JPanel();
        VolverAyudaPantallaPrincipal1 = new javax.swing.JButton();
        cap3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        SiguienteAyudaConfJug = new javax.swing.JButton();
        AyudaConfPart = new javax.swing.JPanel();
        cap4 = new javax.swing.JLabel();
        VolverAyudaPantallaPrincipal2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jLabel17 = new javax.swing.JLabel();
        jTextArea4 = new javax.swing.JTextArea();
        AyudaUsuario = new javax.swing.JPanel();
        VolverAyudaUsuario = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        cap12 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        SiguienteAyudaUsuario = new javax.swing.JButton();
        AyudaUsuario2 = new javax.swing.JPanel();
        VolverAyudaUsuario2 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        cap15 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        SiguienteAyudaUsuario2 = new javax.swing.JButton();
        AyudaUsuario3 = new javax.swing.JPanel();
        VolverAyudaUsuario3 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        cap16 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        AyudaRanking = new javax.swing.JPanel();
        VolverAyudaRanking = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        cap11 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        AyudaCargarPartida = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        cap13 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea9 = new javax.swing.JTextArea();
        VolverAyudaCargarPartida = new javax.swing.JButton();
        SiguienteAyudaUsuario3 = new javax.swing.JButton();
        AyudaCargarPartida1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        cap17 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea11 = new javax.swing.JTextArea();
        VolverAyudaCargarPartida1 = new javax.swing.JButton();
        AyudaRegistrar = new javax.swing.JPanel();
        VolverAyudaRegistrar = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        cap14 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea10 = new javax.swing.JTextArea();
        AyudaReglesBlackJack = new javax.swing.JPanel();
        VolverAyudaRegistrar1 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea12 = new javax.swing.JTextArea();
        AyudaPartida = new javax.swing.JPanel();
        VolverAyudaRegistrar2 = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        cap5 = new javax.swing.JLabel();
        SiguienteAyudaPartida = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextArea13 = new javax.swing.JTextArea();
        AyudaPartida1 = new javax.swing.JPanel();
        VolverAyudaRegistrar3 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        cap6 = new javax.swing.JLabel();
        SiguienteAyudaPartida1 = new javax.swing.JButton();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTextArea14 = new javax.swing.JTextArea();
        AyudaPartida2 = new javax.swing.JPanel();
        VolverAyudaRegistrar4 = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        cap7 = new javax.swing.JLabel();
        SiguienteAyudaPartida2 = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTextArea15 = new javax.swing.JTextArea();
        AyudaPartida3 = new javax.swing.JPanel();
        VolverAyudaRegistrar5 = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        cap8 = new javax.swing.JLabel();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTextArea16 = new javax.swing.JTextArea();
        ConfigJugadoresGui = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        juga1 = new javax.swing.JLabel();
        juga2 = new javax.swing.JLabel();
        juga3 = new javax.swing.JLabel();
        juga4 = new javax.swing.JLabel();
        juga7 = new javax.swing.JLabel();
        juga6 = new javax.swing.JLabel();
        juga5 = new javax.swing.JLabel();
        aceptarJugs = new javax.swing.JButton();
        njug = new javax.swing.JTextField();
        cJ1 = new javax.swing.JButton();
        cJ2 = new javax.swing.JButton();
        cJ3 = new javax.swing.JButton();
        cJ4 = new javax.swing.JButton();
        cJ5 = new javax.swing.JButton();
        cJ6 = new javax.swing.JButton();
        cJ7 = new javax.swing.JButton();
        LoginGui2 = new javax.swing.JPanel();
        user = new javax.swing.JTextField();
        registrar2 = new javax.swing.JButton();
        aceptar2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cancelar2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        pass = new javax.swing.JTextField();
        incorrecto = new javax.swing.JLabel();

        PartidaGui.setBackground(new java.awt.Color(0, 51, 0));
        PartidaGui.setForeground(new java.awt.Color(255, 255, 255));
        PartidaGui.setMinimumSize(new java.awt.Dimension(100, 100));
        PartidaGui.setLayout(null);
        PartidaGui.add(CC2);
        CC2.setBounds(380, 70, 70, 100);
        PartidaGui.add(CC1);
        CC1.setBounds(310, 70, 70, 100);

        aMinim.setEditable(false);
        PartidaGui.add(aMinim);
        aMinim.setBounds(150, 60, 59, 20);

        aMa.setEditable(false);
        PartidaGui.add(aMa);
        aMa.setBounds(150, 90, 60, 20);

        apmin.setForeground(new java.awt.Color(255, 255, 255));
        apmin.setText("Apuesta Minima");
        PartidaGui.add(apmin);
        apmin.setBounds(50, 60, 100, 14);

        apmax.setForeground(new java.awt.Color(255, 255, 255));
        apmax.setText("Apuesta Maxima");
        PartidaGui.add(apmax);
        apmax.setBounds(50, 90, 100, 14);

        croupier.setForeground(new java.awt.Color(255, 255, 255));
        croupier.setText("Croupier");
        PartidaGui.add(croupier);
        croupier.setBounds(490, 30, 50, 20);

        N1.setForeground(new java.awt.Color(255, 255, 255));
        N1.setText("jugador1");
        PartidaGui.add(N1);
        N1.setBounds(110, 240, 60, 14);

        N2.setForeground(new java.awt.Color(255, 255, 255));
        N2.setText("jugador2");
        PartidaGui.add(N2);
        N2.setBounds(250, 240, 50, 14);

        N3.setForeground(new java.awt.Color(255, 255, 255));
        N3.setText("jugador3");
        PartidaGui.add(N3);
        N3.setBounds(410, 240, 50, 14);

        N4.setForeground(new java.awt.Color(255, 255, 255));
        N4.setText("jugador4");
        PartidaGui.add(N4);
        N4.setBounds(570, 240, 50, 14);

        N5.setForeground(new java.awt.Color(255, 255, 255));
        N5.setText("jugador5");
        PartidaGui.add(N5);
        N5.setBounds(730, 240, 50, 14);

        N6.setForeground(new java.awt.Color(255, 255, 255));
        N6.setText("jugador6");
        PartidaGui.add(N6);
        N6.setBounds(870, 240, 50, 14);

        N7.setForeground(new java.awt.Color(255, 255, 255));
        N7.setText("jugador7");
        PartidaGui.add(N7);
        N7.setBounds(1010, 240, 50, 14);

        T1.setEditable(false);
        PartidaGui.add(T1);
        T1.setBounds(120, 200, 20, 20);

        T2.setEditable(false);
        PartidaGui.add(T2);
        T2.setBounds(260, 200, 20, 20);

        T3.setEditable(false);
        PartidaGui.add(T3);
        T3.setBounds(420, 200, 20, 20);

        T4.setEditable(false);
        PartidaGui.add(T4);
        T4.setBounds(580, 200, 20, 20);

        T5.setEditable(false);
        PartidaGui.add(T5);
        T5.setBounds(740, 200, 20, 20);

        T6.setEditable(false);
        PartidaGui.add(T6);
        T6.setBounds(880, 200, 20, 20);

        T7.setEditable(false);
        PartidaGui.add(T7);
        T7.setBounds(1020, 200, 20, 20);

        iniPartida.setText("Iniciar Partida");
        iniPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniPartidaActionPerformed(evt);
            }
        });
        PartidaGui.add(iniPartida);
        iniPartida.setBounds(860, 40, 150, 23);

        abandPartida.setText("Abandonar Partida");
        abandPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abandPartidaActionPerformed(evt);
            }
        });
        PartidaGui.add(abandPartida);
        abandPartida.setBounds(860, 70, 150, 23);

        gPartida.setText("Guardar Partida");
        gPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gPartidaActionPerformed(evt);
            }
        });
        PartidaGui.add(gPartida);
        gPartida.setBounds(860, 100, 150, 23);

        F1.setEditable(false);
        PartidaGui.add(F1);
        F1.setBounds(100, 270, 60, 20);

        F2.setEditable(false);
        PartidaGui.add(F2);
        F2.setBounds(240, 270, 60, 20);

        F3.setEditable(false);
        PartidaGui.add(F3);
        F3.setBounds(400, 270, 60, 20);

        F4.setEditable(false);
        PartidaGui.add(F4);
        F4.setBounds(560, 270, 60, 20);

        F5.setEditable(false);
        PartidaGui.add(F5);
        F5.setBounds(720, 270, 60, 20);

        F6.setEditable(false);
        PartidaGui.add(F6);
        F6.setBounds(860, 270, 60, 20);

        F7.setEditable(false);
        PartidaGui.add(F7);
        F7.setBounds(1000, 270, 60, 20);

        P1.setEditable(false);
        PartidaGui.add(P1);
        P1.setBounds(100, 300, 60, 20);

        P2.setEditable(false);
        PartidaGui.add(P2);
        P2.setBounds(240, 300, 60, 20);

        P3.setEditable(false);
        PartidaGui.add(P3);
        P3.setBounds(400, 300, 60, 20);

        P4.setEditable(false);
        PartidaGui.add(P4);
        P4.setBounds(560, 300, 60, 20);

        P5.setEditable(false);
        PartidaGui.add(P5);
        P5.setBounds(720, 300, 60, 20);

        P6.setEditable(false);
        PartidaGui.add(P6);
        P6.setBounds(860, 300, 60, 20);

        P7.setEditable(false);
        PartidaGui.add(P7);
        P7.setBounds(1000, 300, 60, 20);

        fichas.setForeground(new java.awt.Color(255, 255, 255));
        fichas.setText("Fichas");
        PartidaGui.add(fichas);
        fichas.setBounds(20, 270, 50, 14);

        punt.setForeground(new java.awt.Color(255, 255, 255));
        punt.setText("Puntuacion");
        PartidaGui.add(punt);
        punt.setBounds(20, 300, 130, 14);

        hit.setText("Hit");
        hit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitActionPerformed(evt);
            }
        });
        PartidaGui.add(hit);
        hit.setBounds(160, 400, 100, 23);

        doblar.setText("Double");
        doblar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doblarActionPerformed(evt);
            }
        });
        PartidaGui.add(doblar);
        doblar.setBounds(160, 460, 100, 23);

        insurance.setText("Insurance");
        insurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insuranceActionPerformed(evt);
            }
        });
        PartidaGui.add(insurance);
        insurance.setBounds(160, 490, 100, 23);

        split.setText("Split");
        split.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitActionPerformed(evt);
            }
        });
        PartidaGui.add(split);
        split.setBounds(160, 520, 100, 23);

        stand.setText("Stand");
        stand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standActionPerformed(evt);
            }
        });
        PartidaGui.add(stand);
        stand.setBounds(160, 430, 100, 23);
        PartidaGui.add(apuesta);
        apuesta.setBounds(930, 420, 70, 20);

        apuest.setForeground(new java.awt.Color(255, 255, 255));
        apuest.setText("Apuesta");
        PartidaGui.add(apuest);
        apuest.setBounds(860, 420, 70, 14);

        apostar.setText("Apostar");
        apostar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apostarActionPerformed(evt);
            }
        });
        PartidaGui.add(apostar);
        apostar.setBounds(930, 450, 100, 23);

        pCroup.setEditable(false);
        PartidaGui.add(pCroup);
        pCroup.setBounds(560, 30, 110, 20);

        aviso.setForeground(new java.awt.Color(255, 255, 255));
        PartidaGui.add(aviso);
        aviso.setBounds(860, 500, 270, 40);
        PartidaGui.add(CC3);
        CC3.setBounds(450, 70, 70, 100);
        PartidaGui.add(CC4);
        CC4.setBounds(520, 70, 70, 100);
        PartidaGui.add(CC5);
        CC5.setBounds(590, 70, 70, 100);
        PartidaGui.add(CC6);
        CC6.setBounds(660, 70, 70, 100);
        PartidaGui.add(CC7);
        CC7.setBounds(730, 70, 70, 100);
        PartidaGui.add(CJ2);
        CJ2.setBounds(400, 390, 70, 100);
        PartidaGui.add(CJ9);
        CJ9.setBounds(540, 490, 70, 100);
        PartidaGui.add(CJ3);
        CJ3.setBounds(470, 390, 70, 100);
        PartidaGui.add(CJ4);
        CJ4.setBounds(540, 390, 70, 100);
        PartidaGui.add(CJ5);
        CJ5.setBounds(610, 390, 70, 100);
        PartidaGui.add(CJ6);
        CJ6.setBounds(680, 390, 70, 100);
        PartidaGui.add(CJ7);
        CJ7.setBounds(750, 390, 70, 100);
        PartidaGui.add(CJ1);
        CJ1.setBounds(330, 390, 70, 100);
        PartidaGui.add(CJ8);
        CJ8.setBounds(470, 490, 70, 100);

        aMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aMinActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Configuraci√≥n Partida");

        jLabel7.setText("Apuesta Minima");

        jLabel10.setText("Apuesta Maxima");

        jug.setText("Jugar");
        jug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jugActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setText("Ten en cuenta que los jugadores empiezan con 1000 fichas");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConfigPartidaGuiLayout = new javax.swing.GroupLayout(ConfigPartidaGui);
        ConfigPartidaGui.setLayout(ConfigPartidaGuiLayout);
        ConfigPartidaGuiLayout.setHorizontalGroup(
            ConfigPartidaGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigPartidaGuiLayout.createSequentialGroup()
                .addGroup(ConfigPartidaGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigPartidaGuiLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ConfigPartidaGuiLayout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(jug))
                    .addGroup(ConfigPartidaGuiLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(ConfigPartidaGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10))
                        .addGap(108, 108, 108)
                        .addGroup(ConfigPartidaGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(aMin)
                            .addComponent(aMax, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ConfigPartidaGuiLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        ConfigPartidaGuiLayout.setVerticalGroup(
            ConfigPartidaGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigPartidaGuiLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(ConfigPartidaGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(aMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(ConfigPartidaGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(59, 59, 59)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(jug)
                .addGap(48, 48, 48))
        );

        EstadisticasGui.setBackground(new java.awt.Color(255, 255, 204));

        titulo.setFont(new java.awt.Font("Tahoma", 0, 36));
        titulo.setText("Estadisticas y Achievements");

        retorno.setText("Volver");
        retorno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retornoActionPerformed(evt);
            }
        });

        pganadas.setText("Partidas Ganadas");

        pperdidas.setText("Partidas Perdidas");

        pjugadas.setText("Partidas Jugadas");

        pmedia.setText("Puntuacion Media");

        nbj.setText("Numero Blackjacks");

        nemp.setText("Numero Empates");

        nsplit.setText("Numero Splits");

        adoblades.setText("Apuestas dobladas");

        sutiliz.setText("Seguros Utilizados");

        maxNfichas.setText("Maximo numero fichas");

        PG.setEditable(false);

        PP.setEditable(false);

        PJ.setEditable(false);

        PM.setEditable(false);

        NB.setEditable(false);

        NE.setEditable(false);

        NS.setEditable(false);

        AD.setEditable(false);

        SU.setEditable(false);

        MF.setEditable(false);

        primbj.setText("Primer Blackjack");

        primmagan.setText("Primera Mano Ganada");

        empbj.setText("Empate a Blackjack");

        qmang.setText("15 Manos Ganadas");

        qbj.setText("15 Blackjacks");

        gmcat.setText("Ganar con menos de 14");

        pcv.setText("Perder con 20");

        dsplit.setText("Doble Split");

        ain.setText("All In");

        PB.setEditable(false);

        PMG.setEditable(false);
        PMG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMGActionPerformed(evt);
            }
        });

        EB.setEditable(false);

        QM.setEditable(false);

        QB.setEditable(false);

        GC.setEditable(false);

        PV.setEditable(false);

        DS.setEditable(false);

        AI.setEditable(false);

        TA.setEditable(false);

        tach.setText("Todos los Achievements");

        javax.swing.GroupLayout EstadisticasGuiLayout = new javax.swing.GroupLayout(EstadisticasGui);
        EstadisticasGui.setLayout(EstadisticasGuiLayout);
        EstadisticasGuiLayout.setHorizontalGroup(
            EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EstadisticasGuiLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EstadisticasGuiLayout.createSequentialGroup()
                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addComponent(retorno)
                        .addGap(327, 327, 327))
                    .addGroup(EstadisticasGuiLayout.createSequentialGroup()
                        .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(EstadisticasGuiLayout.createSequentialGroup()
                                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sutiliz)
                                    .addComponent(adoblades)
                                    .addComponent(nsplit)
                                    .addComponent(nemp)
                                    .addComponent(nbj)
                                    .addComponent(pmedia)
                                    .addComponent(pjugadas)
                                    .addComponent(pperdidas)
                                    .addComponent(pganadas)
                                    .addComponent(maxNfichas))
                                .addGap(37, 37, 37)
                                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(MF)
                                    .addComponent(PP)
                                    .addComponent(PJ)
                                    .addComponent(PG, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                    .addComponent(PM)
                                    .addComponent(NB)
                                    .addComponent(NE)
                                    .addComponent(NS)
                                    .addComponent(AD)
                                    .addComponent(SU))
                                .addGap(123, 123, 123)
                                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(primbj)
                                    .addComponent(primmagan)
                                    .addComponent(empbj)
                                    .addComponent(qmang)
                                    .addComponent(qbj)
                                    .addComponent(gmcat)
                                    .addComponent(pcv)
                                    .addComponent(dsplit)
                                    .addComponent(ain)
                                    .addComponent(tach))
                                .addGap(41, 41, 41)
                                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(PB, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                                    .addComponent(PMG)
                                    .addComponent(EB)
                                    .addComponent(QM)
                                    .addComponent(QB)
                                    .addComponent(GC)
                                    .addComponent(PV)
                                    .addComponent(DS)
                                    .addComponent(AI)
                                    .addComponent(TA)))
                            .addComponent(titulo))
                        .addContainerGap(93, Short.MAX_VALUE))))
        );
        EstadisticasGuiLayout.setVerticalGroup(
            EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EstadisticasGuiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pganadas)
                    .addComponent(PG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(primbj)
                    .addComponent(PB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pperdidas)
                    .addComponent(PP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(primmagan)
                    .addComponent(PMG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pjugadas)
                    .addComponent(PJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(empbj)
                    .addComponent(EB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pmedia)
                    .addComponent(PM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qmang)
                    .addComponent(QM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbj)
                    .addComponent(NB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qbj)
                    .addComponent(QB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nemp)
                    .addComponent(NE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gmcat)
                    .addComponent(GC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nsplit)
                    .addComponent(NS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pcv)
                    .addComponent(PV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adoblades)
                    .addComponent(AD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dsplit)
                    .addComponent(DS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sutiliz)
                    .addComponent(SU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ain)
                    .addComponent(AI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxNfichas)
                    .addComponent(MF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tach))
                .addGap(27, 27, 27)
                .addGroup(EstadisticasGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(retorno, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        AyudaGui.setBackground(new java.awt.Color(153, 204, 255));
        AyudaGui.setLayout(null);

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel36.setText("Ayuda");
        AyudaGui.add(jLabel36);
        jLabel36.setBounds(260, 30, 65, 29);

        nuevaPartida.setText("Nueva Partida");
        nuevaPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaPartidaActionPerformed(evt);
            }
        });
        AyudaGui.add(nuevaPartida);
        nuevaPartida.setBounds(59, 125, 130, 23);

        usuario.setText("Usuario");
        usuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuarioActionPerformed(evt);
            }
        });
        AyudaGui.add(usuario);
        usuario.setBounds(59, 166, 130, 23);

        ranking.setText("Ranking");
        ranking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingActionPerformed(evt);
            }
        });
        AyudaGui.add(ranking);
        ranking.setBounds(59, 207, 130, 23);

        cargarPartida.setText("Cargar Partida");
        cargarPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarPartidaActionPerformed(evt);
            }
        });
        AyudaGui.add(cargarPartida);
        cargarPartida.setBounds(415, 125, 130, 23);

        registrarayuda.setText("Registrar");
        registrarayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarayudaActionPerformed(evt);
            }
        });
        AyudaGui.add(registrarayuda);
        registrarayuda.setBounds(415, 166, 130, 23);

        pantallaPrincipal.setText("Pantalla Principal");
        pantallaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pantallaPrincipalActionPerformed(evt);
            }
        });
        AyudaGui.add(pantallaPrincipal);
        pantallaPrincipal.setBounds(40, 250, 170, 23);

        creditos.setText("Creditos");
        creditos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditosActionPerformed(evt);
            }
        });
        AyudaGui.add(creditos);
        creditos.setBounds(415, 207, 130, 23);

        volver.setText("Volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });
        AyudaGui.add(volver);
        volver.setBounds(260, 310, 90, 23);

        AyudaReglesBJ.setText("Regles Black Jack");
        AyudaReglesBJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AyudaReglesBJActionPerformed(evt);
            }
        });
        AyudaGui.add(AyudaReglesBJ);
        AyudaReglesBJ.setBounds(400, 250, 160, 23);

        AyudaP.setText("Partida");
        AyudaP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AyudaPActionPerformed(evt);
            }
        });
        AyudaGui.add(AyudaP);
        AyudaP.setBounds(240, 120, 130, 70);

        popupGui.setBackground(new java.awt.Color(0, 51, 0));
        popupGui.setMaximumSize(new java.awt.Dimension(330, 160));

        salSinG.setText("Salir Sin Guardar");
        salSinG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salSinGActionPerformed(evt);
            }
        });

        SalG.setText("Salir Guardando");
        SalG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalGActionPerformed(evt);
            }
        });

        titol.setForeground(new java.awt.Color(255, 255, 255));
        titol.setText("Que desea Hacer?");

        cancSalir.setText("Cancelar");
        cancSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout popupGuiLayout = new javax.swing.GroupLayout(popupGui);
        popupGui.setLayout(popupGuiLayout);
        popupGuiLayout.setHorizontalGroup(
            popupGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popupGuiLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(SalG)
                .addGap(15, 15, 15)
                .addGroup(popupGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titol)
                    .addGroup(popupGuiLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(salSinG)
                        .addGap(31, 31, 31)
                        .addComponent(cancSalir)))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        popupGuiLayout.setVerticalGroup(
            popupGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(popupGuiLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(titol)
                .addGap(61, 61, 61)
                .addGroup(popupGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancSalir)
                    .addComponent(SalG)
                    .addComponent(salSinG))
                .addContainerGap(116, Short.MAX_VALUE))
        );

        partidaGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partidaGuardarActionPerformed(evt);
            }
        });

        jLabel47.setText("Nombre");

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        cancelG.setText("Cancelar");
        cancelG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelGActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GuardarGuiLayout = new javax.swing.GroupLayout(GuardarGui);
        GuardarGui.setLayout(GuardarGuiLayout);
        GuardarGuiLayout.setHorizontalGroup(
            GuardarGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GuardarGuiLayout.createSequentialGroup()
                .addGroup(GuardarGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GuardarGuiLayout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jLabel47)
                        .addGap(82, 82, 82)
                        .addComponent(partidaGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(GuardarGuiLayout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(guardar)
                        .addGap(47, 47, 47)
                        .addComponent(cancelG))
                    .addGroup(GuardarGuiLayout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(avi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(271, Short.MAX_VALUE))
        );
        GuardarGuiLayout.setVerticalGroup(
            GuardarGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GuardarGuiLayout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(GuardarGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(partidaGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47))
                .addGap(79, 79, 79)
                .addGroup(GuardarGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(cancelG))
                .addGap(66, 66, 66)
                .addComponent(avi, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(139, Short.MAX_VALUE))
        );

        title.setFont(new java.awt.Font("Tahoma", 0, 36));
        title.setText("Validacion Jugadores");

        LJ1.setText("Jugador1");

        LJ2.setText("Jugador2");

        LJ3.setText("Jugador3");

        LJ4.setText("Jugador4");

        LJ5.setText("Jugador5");

        LJ6.setText("Jugador6");

        LJ7.setText("Jugador7");

        VJ1.setText("Validar");
        VJ1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VJ1ActionPerformed(evt);
            }
        });

        VJ2.setText("Validar");
        VJ2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VJ2ActionPerformed(evt);
            }
        });

        VJ3.setText("Validar");
        VJ3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VJ3ActionPerformed(evt);
            }
        });

        VJ4.setText("Validar");
        VJ4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VJ4ActionPerformed(evt);
            }
        });

        VJ5.setText("Validar");
        VJ5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VJ5ActionPerformed(evt);
            }
        });

        VJ6.setText("Validar");
        VJ6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VJ6ActionPerformed(evt);
            }
        });

        VJ7.setText("Validar");
        VJ7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VJ7ActionPerformed(evt);
            }
        });

        jugar.setText("Jugar");
        jugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jugarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout recuperarJugsLayout = new javax.swing.GroupLayout(recuperarJugs);
        recuperarJugs.setLayout(recuperarJugsLayout);
        recuperarJugsLayout.setHorizontalGroup(
            recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recuperarJugsLayout.createSequentialGroup()
                .addGap(232, 232, 232)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LJ1)
                    .addComponent(LJ2)
                    .addComponent(LJ3)
                    .addComponent(LJ4)
                    .addComponent(LJ5)
                    .addComponent(LJ6)
                    .addComponent(LJ7))
                .addGap(53, 53, 53)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VJ6)
                    .addComponent(VJ7)
                    .addComponent(VJ5)
                    .addComponent(VJ4)
                    .addComponent(VJ3)
                    .addComponent(VJ2)
                    .addComponent(VJ1))
                .addContainerGap(242, Short.MAX_VALUE))
            .addGroup(recuperarJugsLayout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jugar)
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        recuperarJugsLayout.setVerticalGroup(
            recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recuperarJugsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LJ1)
                    .addComponent(VJ1))
                .addGap(18, 18, 18)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LJ2)
                    .addComponent(VJ2))
                .addGap(18, 18, 18)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LJ3)
                    .addComponent(VJ3))
                .addGap(18, 18, 18)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LJ4)
                    .addComponent(VJ4))
                .addGap(18, 18, 18)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LJ5)
                    .addComponent(VJ5))
                .addGap(15, 15, 15)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LJ6)
                    .addComponent(VJ6))
                .addGap(18, 18, 18)
                .addGroup(recuperarJugsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LJ7)
                    .addComponent(VJ7))
                .addGap(32, 32, 32)
                .addComponent(jugar)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        cancelar3.setText("Cancelar");
        cancelar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar3ActionPerformed(evt);
            }
        });

        incorrecto1.setFont(new java.awt.Font("Tahoma", 0, 14));
        incorrecto1.setText("Los datos introducidos son incorrectos");

        aceptar3.setText("Aceptar");
        aceptar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptar3ActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel38.setText("Por favor, introduce tu nombre de usuario y password");

        jLabel40.setText("Usuario:");

        jLabel41.setText("Password:");

        javax.swing.GroupLayout LoginGUI3Layout = new javax.swing.GroupLayout(LoginGUI3);
        LoginGUI3.setLayout(LoginGUI3Layout);
        LoginGUI3Layout.setHorizontalGroup(
            LoginGUI3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 457, Short.MAX_VALUE)
            .addGroup(LoginGUI3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(LoginGUI3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addGroup(LoginGUI3Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(LoginGUI3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(LoginGUI3Layout.createSequentialGroup()
                                .addComponent(aceptar3, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                .addGap(55, 55, 55)
                                .addComponent(cancelar3, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, LoginGUI3Layout.createSequentialGroup()
                                .addGroup(LoginGUI3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel40)
                                    .addComponent(jLabel41))
                                .addGap(26, 26, 26)
                                .addGroup(LoginGUI3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pass1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(user1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)))
                            .addComponent(incorrecto1))
                        .addGap(81, 81, 81)))
                .addGap(44, 44, 44))
        );
        LoginGUI3Layout.setVerticalGroup(
            LoginGUI3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginGUI3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel38)
                .addGap(18, 18, 18)
                .addGroup(LoginGUI3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(user1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LoginGUI3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(pass1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(LoginGUI3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aceptar3)
                    .addComponent(cancelar3))
                .addGap(42, 42, 42)
                .addComponent(incorrecto1)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        CreditosGui.setBackground(new java.awt.Color(0, 153, 204));
        CreditosGui.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24));
        jLabel1.setText("Cr√©ditos");
        CreditosGui.add(jLabel1);
        jLabel1.setBounds(300, 30, 86, 29);
        CreditosGui.add(labelGrido);
        labelGrido.setBounds(70, 110, 160, 227);
        CreditosGui.add(labelGuille);
        labelGuille.setBounds(270, 110, 170, 220);
        CreditosGui.add(labelJoan);
        labelJoan.setBounds(490, 110, 170, 220);

        jLabel11.setText("Victor Coello Casado");
        CreditosGui.add(jLabel11);
        jLabel11.setBounds(90, 380, 130, 14);

        jLabel12.setText("Guillem Sola Blasi");
        CreditosGui.add(jLabel12);
        jLabel12.setBounds(310, 380, 120, 14);

        jLabel13.setText("Joan Soler Company");
        CreditosGui.add(jLabel13);
        jLabel13.setBounds(520, 380, 120, 14);

        volv.setText("Volver");
        volv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volvActionPerformed(evt);
            }
        });
        CreditosGui.add(volv);
        volv.setBounds(300, 440, 110, 23);

        AyudaPantallaPrincipal.setBackground(new java.awt.Color(153, 204, 255));
        AyudaPantallaPrincipal.setAutoscrolls(true);
        AyudaPantallaPrincipal.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaPantallaPrincipal.setPreferredSize(new java.awt.Dimension(777, 769));
        AyudaPantallaPrincipal.setLayout(null);

        VolverAyudaPantallaPrincipal.setText("Volver");
        VolverAyudaPantallaPrincipal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        VolverAyudaPantallaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaPantallaPrincipalActionPerformed(evt);
            }
        });
        AyudaPantallaPrincipal.add(VolverAyudaPantallaPrincipal);
        VolverAyudaPantallaPrincipal.setBounds(340, 680, 70, 23);

        cap1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AyudaPantallaPrincipal.add(cap1);
        cap1.setBounds(80, 70, 614, 337);

        jTextArea1.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Calibri", 0, 14));
        jTextArea1.setRows(5);
        jTextArea1.setText("Esta es la primera pantalla que encontramos al ejecutar el programa. En ella encontramos las diferentes opciones;\nNueva Partida, Cargar Partida, Usuario, Registrar, Ranking y Ayuda.  \n\nCon la primera opci√≥n, Nueva Partida creamos una nueva partida de BlackJack y vamos a la pantalla Selecci√≥n\nde jugadores. \n\nCargar Partida nos permite cargar una partida previamente guardada y restaurarla como en el estado en que\nse guard√≥. Nos lleva a la pantalla Cargar Partida.\n\nLa opci√≥n Usuario nos lleva a la pantalla de identificaci√≥n de usuario donde o bien introducimos un usuario\nya existente o bien registramos un nuevo. Posteriormente, una vez identificado accedemos a la pantalla usuario\nque nos permite modificar la contrase√±a y seguidamente veremos sus estad√≠sticas y achievements. \n\nRegistrar usuario nos lleva a la pantalla de alta de nuevo usuario donde podremos dar de alta un nuevo usuario\nen el sistema.\n\nRanking nos muestra la pantalla de ranking con las mejores puntuaciones de los jugadores registrados en el juego.\n\nFinalmente Ayuda nos muestra el manual de usuario.\n");
        jTextArea1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(jTextArea1);

        AyudaPantallaPrincipal.add(jScrollPane1);
        jScrollPane1.setBounds(30, 416, 727, 250);

        jLabel14.setFont(new java.awt.Font("Calibri", 1, 24));
        jLabel14.setText("AYUDA PANTALLA PRINCIPAL");
        AyudaPantallaPrincipal.add(jLabel14);
        jLabel14.setBounds(230, 30, 295, 30);

        AyudaNuevaPartida.setBackground(new java.awt.Color(153, 204, 255));
        AyudaNuevaPartida.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaNuevaPartida.setPreferredSize(new java.awt.Dimension(777, 769));
        AyudaNuevaPartida.setLayout(null);

        VolverAyudaNuevaPartida.setText("Volver");
        VolverAyudaNuevaPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaNuevaPartidaActionPerformed(evt);
            }
        });
        AyudaNuevaPartida.add(VolverAyudaNuevaPartida);
        VolverAyudaNuevaPartida.setBounds(300, 680, 70, 23);

        cap2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        cap2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        AyudaNuevaPartida.add(cap2);
        cap2.setBounds(100, 90, 569, 348);

        jTextArea2.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setText("Hemos elegido empezar una nueva partida. Ahora debemos elegir el n√∫mero de jugadores que van a poder jugar. \nSeguidamente, para cada jugador deberemos escoger si queremos que sea un usuario registrado (Humano),\nun usuario invitado (Invitado) o que juegue un usuario controlado por la m√°quina (M√°quina). Adem√°s si \nelegimos M√°quina podremos elegir el nivel de juego de esta (estrategia).\n\nUna vez hayamos seleccionado los jugadores, pulsamos Aceptar y vamos a la pantalla configuraci√≥n de jugadores\ndonde debemos cargar los usuarios que sean Humanos.\n\nN√∫mero de jugadores: En este desplegable debemos indicar el n√∫mero de jugadores que van a jugar en la partida.\n\nJugador X: Para cada jugador debemos seleccionar en el desplegable el modo en que queremos que juegue;\nInvitado, Humano y M√°quina. Si es m√°quina elegimos tambi√©n el nivel de juego de esta.\n");
        jTextArea2.setPreferredSize(new java.awt.Dimension(644, 344));
        jScrollPane2.setViewportView(jTextArea2);

        AyudaNuevaPartida.add(jScrollPane2);
        jScrollPane2.setBounds(20, 450, 730, 203);

        SiguienteAyudaNuevaPartida.setText("Siguiente");
        SiguienteAyudaNuevaPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteAyudaNuevaPartidaActionPerformed(evt);
            }
        });
        AyudaNuevaPartida.add(SiguienteAyudaNuevaPartida);
        SiguienteAyudaNuevaPartida.setBounds(380, 680, 90, 23);

        jLabel15.setFont(new java.awt.Font("Calibri", 1, 24));
        jLabel15.setText("AYUDA NUEVA PARTIDA");
        AyudaNuevaPartida.add(jLabel15);
        jLabel15.setBounds(260, 40, 246, 30);

        AyudaConfJug.setBackground(new java.awt.Color(153, 204, 255));
        AyudaConfJug.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaConfJug.setPreferredSize(new java.awt.Dimension(777, 769));
        AyudaConfJug.setLayout(null);

        VolverAyudaPantallaPrincipal1.setText("Volver");
        VolverAyudaPantallaPrincipal1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        VolverAyudaPantallaPrincipal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaPantallaPrincipal1ActionPerformed(evt);
            }
        });
        AyudaConfJug.add(VolverAyudaPantallaPrincipal1);
        VolverAyudaPantallaPrincipal1.setBounds(300, 680, 70, 23);
        AyudaConfJug.add(cap3);
        cap3.setBounds(90, 110, 574, 322);

        jTextArea3.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea3.setColumns(20);
        jTextArea3.setEditable(false);
        jTextArea3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextArea3.setRows(5);
        jTextArea3.setText("En configuraci√≥n de jugadores debemos cargar los usuarios Humanos. Para cada uno debemos logearnos. Una vez\nlogeado el usuario se desactiva su bot√≥n correspondiente y se pondr√° de color verde. Debemos realizar esta operaci√≥n\npara cada jugador Humano. Una vez est√©n todos cargados se activar√° el bot√≥n Aceptar que nos llevar√° a la pantalla \nde la Configuraci√≥n de Partida.");
        jTextArea3.setPreferredSize(new java.awt.Dimension(644, 344));
        jScrollPane3.setViewportView(jTextArea3);

        AyudaConfJug.add(jScrollPane3);
        jScrollPane3.setBounds(30, 456, 700, 210);

        jLabel16.setFont(new java.awt.Font("Calibri", 1, 24));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("AYUDA CONFIGURACI√ìN DE JUGADORES");
        jLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AyudaConfJug.add(jLabel16);
        jLabel16.setBounds(170, 40, 410, 30);

        SiguienteAyudaConfJug.setText("Siguiente");
        SiguienteAyudaConfJug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteAyudaConfJugActionPerformed(evt);
            }
        });
        AyudaConfJug.add(SiguienteAyudaConfJug);
        SiguienteAyudaConfJug.setBounds(380, 680, 90, 23);

        AyudaConfPart.setBackground(new java.awt.Color(153, 204, 255));
        AyudaConfPart.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaConfPart.setPreferredSize(new java.awt.Dimension(777, 769));
        AyudaConfPart.setLayout(null);
        AyudaConfPart.add(cap4);
        cap4.setBounds(100, 100, 540, 320);

        VolverAyudaPantallaPrincipal2.setText("Volver");
        VolverAyudaPantallaPrincipal2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        VolverAyudaPantallaPrincipal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaPantallaPrincipal2ActionPerformed(evt);
            }
        });
        AyudaConfPart.add(VolverAyudaPantallaPrincipal2);
        VolverAyudaPantallaPrincipal2.setBounds(340, 680, 70, 23);

        jScrollPane4.setMinimumSize(new java.awt.Dimension(644, 344));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(644, 344));
        AyudaConfPart.add(jScrollPane4);
        jScrollPane4.setBounds(0, 0, 0, 0);

        jLabel17.setFont(new java.awt.Font("Calibri", 1, 24));
        jLabel17.setText("AYUDA CONFIGURACI√ìN DE PARTIDA");
        AyudaConfPart.add(jLabel17);
        jLabel17.setBounds(180, 20, 400, 70);

        jTextArea4.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea4.setColumns(20);
        jTextArea4.setEditable(false);
        jTextArea4.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextArea4.setRows(5);
        jTextArea4.setText("En esta pantalla debemos configurar los par√°metros de la partida. Deberemos introducir dos valores, \nuno para la apuesta m√≠nima y otro para la apuesta m√°xima. Apuesta M√≠nima debe ser menor que Apuesta M√°xima. \nFinalmente pulsamos el bot√≥n Jugar y ya podremos empezar la partida de BlackJack");
        AyudaConfPart.add(jTextArea4);
        jTextArea4.setBounds(20, 440, 730, 220);

        AyudaUsuario.setBackground(new java.awt.Color(153, 204, 255));
        AyudaUsuario.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaUsuario.setLayout(null);

        VolverAyudaUsuario.setText("Volver");
        VolverAyudaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaUsuarioActionPerformed(evt);
            }
        });
        AyudaUsuario.add(VolverAyudaUsuario);
        VolverAyudaUsuario.setBounds(300, 680, 70, 23);

        jLabel18.setFont(new java.awt.Font("Calibri", 1, 24));
        jLabel18.setText("AYUDA USUARIO");
        AyudaUsuario.add(jLabel18);
        jLabel18.setBounds(310, 20, 200, 70);

        cap12.setMaximumSize(new java.awt.Dimension(9999, 9999));
        cap12.setMinimumSize(new java.awt.Dimension(523, 327));
        AyudaUsuario.add(cap12);
        cap12.setBounds(140, 90, 550, 327);

        jScrollPane5.setMinimumSize(new java.awt.Dimension(644, 344));

        jTextArea5.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea5.setColumns(20);
        jTextArea5.setEditable(false);
        jTextArea5.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextArea5.setRows(5);
        jTextArea5.setText("Pantalla Identificar Usuario logea un usuario existente. En caso de ser un nuevo usuario puedes pulsar Registrar\npara crear un usuario nuevo.");
        jTextArea5.setAutoscrolls(false);
        jTextArea5.setMinimumSize(new java.awt.Dimension(644, 344));
        jTextArea5.setPreferredSize(new java.awt.Dimension(644, 344));
        jScrollPane5.setViewportView(jTextArea5);

        AyudaUsuario.add(jScrollPane5);
        jScrollPane5.setBounds(20, 500, 800, 160);

        SiguienteAyudaUsuario.setText("Siguiente");
        SiguienteAyudaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteAyudaUsuarioActionPerformed(evt);
            }
        });
        AyudaUsuario.add(SiguienteAyudaUsuario);
        SiguienteAyudaUsuario.setBounds(380, 680, 90, 23);

        AyudaUsuario2.setBackground(new java.awt.Color(153, 204, 255));
        AyudaUsuario2.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaUsuario2.setPreferredSize(new java.awt.Dimension(777, 769));
        AyudaUsuario2.setLayout(null);

        VolverAyudaUsuario2.setText("Volver");
        VolverAyudaUsuario2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaUsuario2ActionPerformed(evt);
            }
        });
        AyudaUsuario2.add(VolverAyudaUsuario2);
        VolverAyudaUsuario2.setBounds(300, 680, 70, 23);

        jLabel19.setFont(new java.awt.Font("Calibri", 1, 24));
        jLabel19.setText("AYUDA USUARIO");
        AyudaUsuario2.add(jLabel19);
        jLabel19.setBounds(280, 30, 172, 30);
        AyudaUsuario2.add(cap15);
        cap15.setBounds(120, 90, 540, 320);

        jTextArea6.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea6.setColumns(20);
        jTextArea6.setEditable(false);
        jTextArea6.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextArea6.setRows(5);
        jTextArea6.setText("Pantalla Usuario nos muestra la contrase√±a actual y nos da la posibilidad de cambiarla por otra. Para modificar\nla contrase√±a rellenamos el campo contrase√±a nueva y pulsamos Aceptar. Si pulsamos Cancelar volvemos a la Pantalla Principal.");
        jTextArea6.setMinimumSize(new java.awt.Dimension(644, 344));
        jTextArea6.setPreferredSize(new java.awt.Dimension(644, 344));
        jScrollPane6.setViewportView(jTextArea6);

        AyudaUsuario2.add(jScrollPane6);
        jScrollPane6.setBounds(40, 440, 680, 200);

        SiguienteAyudaUsuario2.setText("Siguiente");
        SiguienteAyudaUsuario2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteAyudaUsuario2ActionPerformed(evt);
            }
        });
        AyudaUsuario2.add(SiguienteAyudaUsuario2);
        SiguienteAyudaUsuario2.setBounds(380, 680, 90, 23);

        AyudaUsuario3.setBackground(new java.awt.Color(153, 204, 255));
        AyudaUsuario3.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaUsuario3.setLayout(null);

        VolverAyudaUsuario3.setText("Volver");
        VolverAyudaUsuario3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaUsuario3ActionPerformed(evt);
            }
        });
        AyudaUsuario3.add(VolverAyudaUsuario3);
        VolverAyudaUsuario3.setBounds(340, 680, 70, 23);

        jLabel20.setFont(new java.awt.Font("Calibri", 1, 24));
        jLabel20.setText("AYUDA USUARIO (ESTADISTICAS Y ACHIEVEMENTS)");
        AyudaUsuario3.add(jLabel20);
        jLabel20.setBounds(170, 10, 520, 60);
        AyudaUsuario3.add(cap16);
        cap16.setBounds(150, 100, 550, 330);

        jScrollPane7.setMinimumSize(new java.awt.Dimension(644, 344));

        jTextArea7.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea7.setColumns(20);
        jTextArea7.setEditable(false);
        jTextArea7.setFont(new java.awt.Font("Calibri", 0, 14));
        jTextArea7.setRows(5);
        jTextArea7.setText("Esta pantalla nos muestra las Estad√≠sticas y Achievements del usuario. Para acceder a ella debemos pulsar el bot√≥n\nUsuario en la Pantalla Principal y logearnos. El bot√≥n de volver nos trae de vuelta a la Pantalla Principal.");
        jTextArea7.setMinimumSize(new java.awt.Dimension(644, 344));
        jTextArea7.setPreferredSize(new java.awt.Dimension(644, 344));
        jScrollPane7.setViewportView(jTextArea7);

        AyudaUsuario3.add(jScrollPane7);
        jScrollPane7.setBounds(30, 470, 780, 190);

        AyudaRanking.setBackground(new java.awt.Color(153, 204, 255));
        AyudaRanking.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaRanking.setLayout(null);

        VolverAyudaRanking.setText("Volver");
        VolverAyudaRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaRankingActionPerformed(evt);
            }
        });
        AyudaRanking.add(VolverAyudaRanking);
        VolverAyudaRanking.setBounds(340, 680, 70, 23);

        jLabel21.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel21.setText("AYUDA RANKING");
        AyudaRanking.add(jLabel21);
        jLabel21.setBounds(290, 30, 200, 40);
        AyudaRanking.add(cap11);
        cap11.setBounds(130, 90, 530, 320);

        jTextArea8.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea8.setColumns(20);
        jTextArea8.setEditable(false);
        jTextArea8.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextArea8.setRows(5);
        jTextArea8.setText("Pantalla Ranking muestra los 10 jugadores con mejor puntuaci√≥n. Pulsamos Volver para ir a la Pantalla Principal.");
        jScrollPane8.setViewportView(jTextArea8);

        AyudaRanking.add(jScrollPane8);
        jScrollPane8.setBounds(40, 430, 690, 230);

        AyudaCargarPartida.setBackground(new java.awt.Color(153, 204, 255));
        AyudaCargarPartida.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaCargarPartida.setLayout(null);

        jLabel22.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel22.setText("AYUDA CARGAR PARTIDA");
        AyudaCargarPartida.add(jLabel22);
        jLabel22.setBounds(290, 20, 270, 60);
        AyudaCargarPartida.add(cap13);
        cap13.setBounds(140, 90, 540, 300);

        jTextArea9.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea9.setColumns(20);
        jTextArea9.setEditable(false);
        jTextArea9.setRows(5);
        jTextArea9.setText("Cargar Partida permite cargar las partidas previamente guardadas. Elegimos la partida que \nqueramos cargar del desplegable y pulsamos Aceptar. \n\nSi pulsamos Cancelar volvemos a la Pantalla Principal.");
        jScrollPane9.setViewportView(jTextArea9);

        AyudaCargarPartida.add(jScrollPane9);
        jScrollPane9.setBounds(50, 420, 740, 230);

        VolverAyudaCargarPartida.setText("Volver");
        VolverAyudaCargarPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaCargarPartidaActionPerformed(evt);
            }
        });
        AyudaCargarPartida.add(VolverAyudaCargarPartida);
        VolverAyudaCargarPartida.setBounds(300, 680, 70, 23);

        SiguienteAyudaUsuario3.setText("Siguiente");
        SiguienteAyudaUsuario3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteAyudaUsuario3ActionPerformed(evt);
            }
        });
        AyudaCargarPartida.add(SiguienteAyudaUsuario3);
        SiguienteAyudaUsuario3.setBounds(380, 680, 90, 23);

        AyudaCargarPartida1.setBackground(new java.awt.Color(153, 204, 255));
        AyudaCargarPartida1.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaCargarPartida1.setLayout(null);

        jLabel24.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel24.setText("AYUDA VALIDACI√ìN");
        AyudaCargarPartida1.add(jLabel24);
        jLabel24.setBounds(290, 20, 270, 60);
        AyudaCargarPartida1.add(cap17);
        cap17.setBounds(140, 90, 540, 300);

        jTextArea11.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea11.setColumns(20);
        jTextArea11.setEditable(false);
        jTextArea11.setRows(5);
        jTextArea11.setText("Al cargar una partida nos aparecer√° esta pantalla. De igual modo que en Configuraci√≥n de\njugadores deberemos logearnos para cada uno de los jugadores Humanos que forman parte de\nla partida. Una vez logeados se activar√° el bot√≥n jugar y pasaremos a la Pantalla Partida\ncon la partida en el estado en que se guard√≥. ");
        jScrollPane11.setViewportView(jTextArea11);

        AyudaCargarPartida1.add(jScrollPane11);
        jScrollPane11.setBounds(50, 420, 740, 230);

        VolverAyudaCargarPartida1.setText("Volver");
        VolverAyudaCargarPartida1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaCargarPartida1ActionPerformed(evt);
            }
        });
        AyudaCargarPartida1.add(VolverAyudaCargarPartida1);
        VolverAyudaCargarPartida1.setBounds(340, 680, 70, 23);

        AyudaRegistrar.setBackground(new java.awt.Color(153, 204, 255));
        AyudaRegistrar.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaRegistrar.setLayout(null);

        VolverAyudaRegistrar.setText("Volver");
        VolverAyudaRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaRegistrarActionPerformed(evt);
            }
        });
        AyudaRegistrar.add(VolverAyudaRegistrar);
        VolverAyudaRegistrar.setBounds(420, 690, 70, 23);

        jLabel23.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel23.setText("AYUDA REGISTRAR");
        AyudaRegistrar.add(jLabel23);
        jLabel23.setBounds(350, 10, 200, 80);
        AyudaRegistrar.add(cap14);
        cap14.setBounds(200, 80, 540, 330);

        jTextArea10.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea10.setColumns(20);
        jTextArea10.setEditable(false);
        jTextArea10.setRows(5);
        jTextArea10.setText("Alta de Nuevo Usuario da de alta un usuario en el sistema. Debemos introducir un nombre en la \ncasilla Nombre de usuario y una contrase√±a en la casilla contrase√±a y pulsar Aceptar.");
        jScrollPane10.setViewportView(jTextArea10);

        AyudaRegistrar.add(jScrollPane10);
        jScrollPane10.setBounds(20, 420, 850, 240);

        AyudaReglesBlackJack.setBackground(new java.awt.Color(153, 204, 255));
        AyudaReglesBlackJack.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaReglesBlackJack.setLayout(null);

        VolverAyudaRegistrar1.setText("Volver");
        VolverAyudaRegistrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaRegistrar1ActionPerformed(evt);
            }
        });
        AyudaReglesBlackJack.add(VolverAyudaRegistrar1);
        VolverAyudaRegistrar1.setBounds(400, 690, 70, 23);

        jLabel25.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel25.setText("REGLES BLACK JACK");
        AyudaReglesBlackJack.add(jLabel25);
        jLabel25.setBounds(350, 10, 200, 80);

        jTextArea12.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea12.setColumns(20);
        jTextArea12.setEditable(false);
        jTextArea12.setRows(5);
        jTextArea12.setText("QU√â HAY QUE SABER\n\nEn el Black Jack cada jugador juega contra la Banca.\n \nCada carta vale su valor num√©rico, a excepci√≥n de las figuras (J, Q, K) que valen diez puntos y del As, \nque vale un punto u once puntos, seg√∫n convenga al jugador.\n\n\nCOMO SE JUEGA\n \nEl objetivo del juego es alcanzar veinti√∫n puntos, o la puntuaci√≥n m√°s pr√≥xima para superar a la Banca\nsin pasarse. La mejor combinaci√≥n se consigue con un Black Jack. Es decir, con un As y una figura, o con\nun As y un 10, que deber√°n obtenerse con las dos primeras cartas.\n\nEn primer lugar cada jugador hace la apuesta en su casilla. Efectuadas todas ellas, el Croupier dice \n‚Äúno va m√°s‚Äù. A continuaci√≥n reparte dos cartas descubiertas a cada jugador y una para la Banca, tambi√©n\ndescubierta. Los jugadores podr√°n pedir cartas hasta conseguir veinti√∫n puntos o hasta que decidan \nplantarse. Si se pasan de veintiuno, pierden, y el Croupier retirar√° sus apuestas. A continuaci√≥n el\nCroupier se dar√° cartas, debiendo pedir carta obligatoriamente si tiene diecis√©is puntos o menos, \ny plantarse si tiene diecisiete puntos o m√°s. \n\n\nTIPOS DE APUESTA\n\nUna vez que el Croupier reparte las cartas se pueden dar las siguientes opciones: \n\nDoblar: \nCuando el jugador suma nueve, diez u once puntos con las dos primeras cartas, tiene derecho a doblar \nsu apuesta, y recibir√° √∫nicamente una carta m√°s. (Doblar supone aumentar la apuesta inicial al doble).\n\nSplit (Abrir o hacer dos juegos): \nSi el jugador recibe dos cartas de igual valor puede jugar con cada una de ellas independientemente, \ncomo si se tratara de dos partidas a la vez. Para ello, deber√° realizar una apuesta igual a la inicial \npara el segundo juego. Pero si las cartas que se abren son dos Ases, s√≥lo se recibe una carta para cada\njuego. Cuando hay juegos abiertos no se puede hacer Black Jack, se considerar√≠a veintiuno. \n\nInsurance (Seguro): \nSi el Croupier se reparte la primera carta y resulta que es un As los jugadores pueden asegurarse \ncontra un posible Black Jack de la Banca; para ello colocan en la l√≠nea de Seguro una cantidad que ser√°\ncomo m√°ximo la mitad de la apuesta inicial. Si el Croupier hace Black Back, pagar√° el doble (2x1) de lo\nque cada jugador haya apostado en el Seguro. Si saca cualquier otra carta retirar√° todo lo jugado en el\nSeguro, y seguir√° d√°ndose cartas.\n");
        jScrollPane12.setViewportView(jTextArea12);

        AyudaReglesBlackJack.add(jScrollPane12);
        jScrollPane12.setBounds(20, 90, 850, 570);

        AyudaPartida.setBackground(new java.awt.Color(153, 204, 255));
        AyudaPartida.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaPartida.setLayout(null);

        VolverAyudaRegistrar2.setText("Volver");
        VolverAyudaRegistrar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaRegistrar2ActionPerformed(evt);
            }
        });
        AyudaPartida.add(VolverAyudaRegistrar2);
        VolverAyudaRegistrar2.setBounds(300, 680, 70, 23);

        jLabel26.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel26.setText("AYUDA PARTIDA");
        AyudaPartida.add(jLabel26);
        jLabel26.setBounds(350, 10, 200, 80);
        AyudaPartida.add(cap5);
        cap5.setBounds(180, 70, 540, 330);

        SiguienteAyudaPartida.setText("Siguiente");
        SiguienteAyudaPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteAyudaPartidaActionPerformed(evt);
            }
        });
        AyudaPartida.add(SiguienteAyudaPartida);
        SiguienteAyudaPartida.setBounds(380, 680, 90, 23);

        jTextArea13.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea13.setColumns(20);
        jTextArea13.setEditable(false);
        jTextArea13.setRows(5);
        jTextArea13.setText("La pantalla partida es la pantalla principal donde se desarrolla el juego del BlackJack.\n\nPara iniciar una partida debemos pulsar el bot√≥n Iniciar Partida. Seguidamente debemos proceder hacer \nla apuestas in√≠ciales para cada jugador. Para hacer la apuesta inicial introducimos un valor (entre \napuestaMin y apuestaMax) en el cuadro de apuesta y pulsamos el bot√≥n apostar. El cuadro negro indica \nque jugador tiene el turno. Una vez hayan apostado todos los jugadores empieza el juego para el primer\njugador. \n");
        jScrollPane13.setViewportView(jTextArea13);

        AyudaPartida.add(jScrollPane13);
        jScrollPane13.setBounds(20, 420, 850, 240);

        AyudaPartida1.setBackground(new java.awt.Color(153, 204, 255));
        AyudaPartida1.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaPartida1.setLayout(null);

        VolverAyudaRegistrar3.setText("Volver");
        VolverAyudaRegistrar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaRegistrar3ActionPerformed(evt);
            }
        });
        AyudaPartida1.add(VolverAyudaRegistrar3);
        VolverAyudaRegistrar3.setBounds(300, 680, 70, 23);

        jLabel27.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel27.setText("AYUDA PARTIDA");
        AyudaPartida1.add(jLabel27);
        jLabel27.setBounds(350, 10, 200, 80);
        AyudaPartida1.add(cap6);
        cap6.setBounds(170, 70, 540, 330);

        SiguienteAyudaPartida1.setText("Siguiente");
        SiguienteAyudaPartida1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteAyudaPartida1ActionPerformed(evt);
            }
        });
        AyudaPartida1.add(SiguienteAyudaPartida1);
        SiguienteAyudaPartida1.setBounds(380, 680, 90, 23);

        jTextArea14.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea14.setColumns(20);
        jTextArea14.setEditable(false);
        jTextArea14.setRows(5);
        jTextArea14.setText("Se reparten dos cartas para cada jugador y una para el Croupier. Solamente son visibles las cartas del \njugador que tiene el turno. Jugar√° cada jugador hasta finalizar su mano. Las posibles opciones del \njugador en una mano son Stand, Hit, Double, Insurance y Split. La mano finaliza cuando el jugador se \nplanta (Stand), tiene 21 (BlackJack) o se ha pasado de 21. \n\nCuando no hay m√°s posibilidades que Stand el jugador deber√° pulsar dicho bot√≥n para terminar su mano.\n\nStand: Plantarse. Se termina la mano del jugador.\n\nHit: Pedir una carta.\n\nEl jugador tiene una mano con una puntuaci√≥n de 9,10 o 11:\nDouble: Se dobla la apuesta y se le da una sola carta m√°s al jugador.\n\nEl Croupier tiene un As:\nInsurance: Se aumenta la apuesta la mitad de la apuesta inicial, y en caso de que el Croupier tenga\nBlackJack se cobra el doble de esta apuesta. Despu√©s de hacer Insurance podemos seguir jugando la mano.\n\nEl jugador tiene dos cartas de igual puntuaci√≥n:\nSplit: Se abren dos manos. Una con cada carta de la in√≠ciales.\n");
        jScrollPane14.setViewportView(jTextArea14);

        AyudaPartida1.add(jScrollPane14);
        jScrollPane14.setBounds(20, 420, 850, 240);

        AyudaPartida2.setBackground(new java.awt.Color(153, 204, 255));
        AyudaPartida2.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaPartida2.setLayout(null);

        VolverAyudaRegistrar4.setText("Volver");
        VolverAyudaRegistrar4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaRegistrar4ActionPerformed(evt);
            }
        });
        AyudaPartida2.add(VolverAyudaRegistrar4);
        VolverAyudaRegistrar4.setBounds(300, 680, 70, 23);

        jLabel28.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel28.setText("AYUDA PARTIDA");
        AyudaPartida2.add(jLabel28);
        jLabel28.setBounds(350, 10, 200, 80);
        AyudaPartida2.add(cap7);
        cap7.setBounds(170, 70, 540, 330);

        SiguienteAyudaPartida2.setText("Siguiente");
        SiguienteAyudaPartida2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteAyudaPartida2ActionPerformed(evt);
            }
        });
        AyudaPartida2.add(SiguienteAyudaPartida2);
        SiguienteAyudaPartida2.setBounds(380, 680, 90, 23);

        jTextArea15.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea15.setColumns(20);
        jTextArea15.setEditable(false);
        jTextArea15.setRows(5);
        jTextArea15.setText("Se reparten dos cartas para cada jugador y una para el Croupier. Solamente son visibles las cartas del \njugador que tiene el turno. Jugar√° cada jugador hasta finalizar su mano. Las posibles opciones del \njugador en una mano son Stand, Hit, Double, Insurance y Split. La mano finaliza cuando el jugador se \nplanta (Stand), tiene 21 (BlackJack) o se ha pasado de 21. \n\nCuando no hay m√°s posibilidades que Stand el jugador deber√° pulsar dicho bot√≥n para terminar su mano.\n\nStand: Plantarse. Se termina la mano del jugador.\n\nHit: Pedir una carta.\n\nEl jugador tiene una mano con una puntuaci√≥n de 9,10 o 11:\nDouble: Se dobla la apuesta y se le da una sola carta m√°s al jugador.\n\nEl Croupier tiene un As:\nInsurance: Se aumenta la apuesta la mitad de la apuesta inicial, y en caso de que el Croupier tenga\nBlackJack se cobra el doble de esta apuesta. Despu√©s de hacer Insurance podemos seguir jugando la mano.\n\nEl jugador tiene dos cartas de igual puntuaci√≥n:\nSplit: Se abren dos manos. Una con cada carta de la in√≠ciales.\n");
        jScrollPane15.setViewportView(jTextArea15);

        AyudaPartida2.add(jScrollPane15);
        jScrollPane15.setBounds(20, 420, 850, 240);

        AyudaPartida3.setBackground(new java.awt.Color(153, 204, 255));
        AyudaPartida3.setMinimumSize(new java.awt.Dimension(777, 769));
        AyudaPartida3.setLayout(null);

        VolverAyudaRegistrar5.setText("Volver");
        VolverAyudaRegistrar5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverAyudaRegistrar5ActionPerformed(evt);
            }
        });
        AyudaPartida3.add(VolverAyudaRegistrar5);
        VolverAyudaRegistrar5.setBounds(390, 690, 70, 23);

        jLabel29.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel29.setText("AYUDA PARTIDA");
        AyudaPartida3.add(jLabel29);
        jLabel29.setBounds(350, 10, 200, 80);
        AyudaPartida3.add(cap8);
        cap8.setBounds(170, 70, 540, 330);

        jTextArea16.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea16.setColumns(20);
        jTextArea16.setEditable(false);
        jTextArea16.setRows(5);
        jTextArea16.setText("Una vez hayan jugado todos los jugadores, el croupier se dar√° cartas hasta alcanzar por lo menos\n17 puntos. Una vez termina el croupier de jugar, autom√°ticamente hace los pagos de las manos de los \njugadores en funci√≥n de si han ganado o perdido respecto el Croupier. \nFinalmente si deseamos volver a jugar, volvemos a pulsar Iniciar Partida.");
        jScrollPane16.setViewportView(jTextArea16);

        AyudaPartida3.add(jScrollPane16);
        jScrollPane16.setBounds(20, 420, 850, 240);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 36));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Configuraci√≥n de jugadores");

        jLabel9.setText("N√∫mero de jugadores");

        juga1.setText("Jugador 1");

        juga2.setText("Jugador 2");

        juga3.setText("Jugador 3");

        juga4.setText("Jugador 4");

        juga7.setText("Jugador 7");

        juga6.setText("Jugador 6");

        juga5.setText("Jugador 5");

        aceptarJugs.setText("Aceptar");
        aceptarJugs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarJugsActionPerformed(evt);
            }
        });

        njug.setEditable(false);

        cJ1.setText("CargarJ1");
        cJ1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cJ1ActionPerformed(evt);
            }
        });

        cJ2.setText("CargarJ2");
        cJ2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cJ2ActionPerformed(evt);
            }
        });

        cJ3.setText("CargarJ3");
        cJ3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cJ3ActionPerformed(evt);
            }
        });

        cJ4.setText("CargarJ4");
        cJ4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cJ4ActionPerformed(evt);
            }
        });

        cJ5.setText("CargarJ5");
        cJ5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cJ5ActionPerformed(evt);
            }
        });

        cJ6.setText("CargarJ6");
        cJ6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cJ6ActionPerformed(evt);
            }
        });

        cJ7.setText("CargarJ7");
        cJ7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cJ7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConfigJugadoresGuiLayout = new javax.swing.GroupLayout(ConfigJugadoresGui);
        ConfigJugadoresGui.setLayout(ConfigJugadoresGuiLayout);
        ConfigJugadoresGuiLayout.setHorizontalGroup(
            ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConfigJugadoresGuiLayout.createSequentialGroup()
                .addContainerGap(432, Short.MAX_VALUE)
                .addComponent(aceptarJugs)
                .addGap(146, 146, 146))
            .addGroup(ConfigJugadoresGuiLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jLabel8)
                .addContainerGap(111, Short.MAX_VALUE))
            .addGroup(ConfigJugadoresGuiLayout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigJugadoresGuiLayout.createSequentialGroup()
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(juga1)
                            .addComponent(juga2)
                            .addComponent(juga3)
                            .addComponent(juga4)
                            .addComponent(juga5)
                            .addComponent(juga6)
                            .addComponent(juga7))
                        .addGap(53, 53, 53)
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cJ7)
                            .addComponent(cJ6)
                            .addComponent(cJ5)
                            .addComponent(cJ4)
                            .addComponent(cJ3)
                            .addComponent(cJ2)
                            .addComponent(cJ1)))
                    .addGroup(ConfigJugadoresGuiLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(njug, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(275, Short.MAX_VALUE))
        );
        ConfigJugadoresGuiLayout.setVerticalGroup(
            ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigJugadoresGuiLayout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigJugadoresGuiLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 335, Short.MAX_VALUE)
                        .addComponent(aceptarJugs)
                        .addContainerGap())
                    .addGroup(ConfigJugadoresGuiLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(njug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(juga1)
                            .addComponent(cJ1))
                        .addGap(18, 18, 18)
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(juga2)
                            .addComponent(cJ2))
                        .addGap(18, 18, 18)
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(juga3)
                            .addComponent(cJ3))
                        .addGap(18, 18, 18)
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(juga4)
                            .addComponent(cJ4))
                        .addGap(18, 18, 18)
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(juga5)
                            .addComponent(cJ5))
                        .addGap(18, 18, 18)
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(juga6)
                            .addComponent(cJ6))
                        .addGap(18, 18, 18)
                        .addGroup(ConfigJugadoresGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(juga7)
                            .addComponent(cJ7))
                        .addContainerGap())))
        );

        registrar2.setText("Registrar");
        registrar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrar2ActionPerformed(evt);
            }
        });

        aceptar2.setText("Aceptar");
        aceptar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptar2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel2.setText("Por favor, introduce tu nombre de usuario y password");

        jLabel3.setText("Si no est√°s registrado puedes hacerlo pulsando el bot√≥n registrar");

        jLabel4.setText("Usuario:");

        jLabel5.setText("Password:");

        cancelar2.setText("Cancelar");
        cancelar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar2ActionPerformed(evt);
            }
        });

        incorrecto.setFont(new java.awt.Font("Tahoma", 0, 14));
        incorrecto.setText("Los datos introducidos son incorrectos");

        javax.swing.GroupLayout LoginGui2Layout = new javax.swing.GroupLayout(LoginGui2);
        LoginGui2.setLayout(LoginGui2Layout);
        LoginGui2Layout.setHorizontalGroup(
            LoginGui2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginGui2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(LoginGui2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel3)
                .addContainerGap(97, Short.MAX_VALUE))
            .addGroup(LoginGui2Layout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(registrar2)
                .addContainerGap(217, Short.MAX_VALUE))
            .addGroup(LoginGui2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(LoginGui2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(LoginGui2Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(LoginGui2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(LoginGui2Layout.createSequentialGroup()
                                .addComponent(aceptar2, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                .addGap(55, 55, 55)
                                .addComponent(cancelar2, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, LoginGui2Layout.createSequentialGroup()
                                .addGroup(LoginGui2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(26, 26, 26)
                                .addGroup(LoginGui2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pass, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(user, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)))
                            .addComponent(incorrecto, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(81, 81, 81)))
                .addGap(44, 44, 44))
        );
        LoginGui2Layout.setVerticalGroup(
            LoginGui2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginGui2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(LoginGui2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LoginGui2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(LoginGui2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aceptar2)
                    .addComponent(cancelar2))
                .addGap(18, 18, 18)
                .addComponent(incorrecto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registrar2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConfigJugadoresGui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(250, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(106, 106, 106)
                    .addComponent(LoginGui2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(346, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConfigJugadoresGui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(331, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(81, 81, 81)
                    .addComponent(LoginGui2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(401, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    /* @author Victor
     * Evento que se genera cuando se han configurado los jugadores y se apreta aceptar
     */
    private void aceptarJugsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarJugsActionPerformed
        // TODO add your handling code here:
           
            ConfigJugadoresGui.setVisible(false);
            ConfigPartidaGui.setVisible(true);
            getRootPane().setContentPane(ConfigPartidaGui);
    }//GEN-LAST:event_aceptarJugsActionPerformed


    /* @author Guillem
     * Eventos generado cuando se apreta el boton cargar del jugador que sea, si se
     * carga correctamente, se pone en verde, cuando todos se han cargado correctamente,
     * se puede aceptar i ir a la siguiente pantalla
     */

    private void cJ2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cJ2ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 2;
        nextpane = ConfigJugadoresGui;
        previouspane = ConfigJugadoresGui;
        ConfigJugadoresGui.setVisible(false);
        incorrecto.setVisible(false);
        LoginGui2.setVisible(true);
        getRootPane().setContentPane(LoginGui2);
        cJ2.setBackground(Color.green);
        cJ2.setEnabled(false);
          if(cJ1.getBackground() == Color.green && cJ2.getBackground() == Color.green && cJ3.getBackground() == Color.green
                && cJ4.getBackground() == Color.green && cJ5.getBackground() == Color.green && cJ6.getBackground() == Color.green
                && cJ7.getBackground() == Color.green){

            aceptarJugs.setEnabled(true);

        }//END_IF
    }//GEN-LAST:event_cJ2ActionPerformed

    private void cJ4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cJ4ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 4;
        nextpane = ConfigJugadoresGui;
        previouspane = ConfigJugadoresGui;
        ConfigJugadoresGui.setVisible(false);
        incorrecto.setVisible(false);
        LoginGui2.setVisible(true);
        getRootPane().setContentPane(LoginGui2);
        cJ4.setBackground(Color.green);
        cJ4.setEnabled(false);
          if(cJ1.getBackground() == Color.green && cJ2.getBackground() == Color.green && cJ3.getBackground() == Color.green
                && cJ4.getBackground() == Color.green && cJ5.getBackground() == Color.green && cJ6.getBackground() == Color.green
                && cJ7.getBackground() == Color.green){

            aceptarJugs.setEnabled(true);

        }//END_IF
    }//GEN-LAST:event_cJ4ActionPerformed

    private void cJ1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cJ1ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 1;
        nextpane = ConfigJugadoresGui;
        previouspane = ConfigJugadoresGui;
        ConfigJugadoresGui.setVisible(false);
        incorrecto.setVisible(false);
        LoginGui2.setVisible(true);
        getRootPane().setContentPane(LoginGui2);
        c = cJ1.getBackground();
        cJ1.setBackground(Color.green);
        cJ1.setEnabled(false);

        if(cJ1.getBackground() == Color.green && cJ2.getBackground() == Color.green && cJ3.getBackground() == Color.green
                && cJ4.getBackground() == Color.green && cJ5.getBackground() == Color.green && cJ6.getBackground() == Color.green
                && cJ7.getBackground() == Color.green){

            aceptarJugs.setEnabled(true);

        }//END_IF
        
    }//GEN-LAST:event_cJ1ActionPerformed

    private void cJ3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cJ3ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 3;
        nextpane = ConfigJugadoresGui;
        previouspane = ConfigJugadoresGui;
        ConfigJugadoresGui.setVisible(false);
        incorrecto.setVisible(false);
        LoginGui2.setVisible(true);
        getRootPane().setContentPane(LoginGui2);
        cJ3.setBackground(Color.green);
        cJ3.setEnabled(false);
          if(cJ1.getBackground() == Color.green && cJ2.getBackground() == Color.green && cJ3.getBackground() == Color.green
                && cJ4.getBackground() == Color.green && cJ5.getBackground() == Color.green && cJ6.getBackground() == Color.green
                && cJ7.getBackground() == Color.green){

            aceptarJugs.setEnabled(true);

        }//END_IF
    }//GEN-LAST:event_cJ3ActionPerformed

    private void cJ5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cJ5ActionPerformed
        // TODO add your handling code here:
         jugadorTratado = 5;
        nextpane = ConfigJugadoresGui;
        previouspane = ConfigJugadoresGui;
        ConfigJugadoresGui.setVisible(false);
        incorrecto.setVisible(false);
        LoginGui2.setVisible(true);
        getRootPane().setContentPane(LoginGui2);
        cJ5.setBackground(Color.green);
        cJ5.setEnabled(false);
          if(cJ1.getBackground() == Color.green && cJ2.getBackground() == Color.green && cJ3.getBackground() == Color.green
                && cJ4.getBackground() == Color.green && cJ5.getBackground() == Color.green && cJ6.getBackground() == Color.green
                && cJ7.getBackground() == Color.green){

            aceptarJugs.setEnabled(true);

        }//END_IF
    }//GEN-LAST:event_cJ5ActionPerformed

    private void cJ6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cJ6ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 6;
        nextpane = ConfigJugadoresGui;
        previouspane = ConfigJugadoresGui;
        ConfigJugadoresGui.setVisible(false);
        incorrecto.setVisible(false);
        LoginGui2.setVisible(true);
        getRootPane().setContentPane(LoginGui2);
        cJ6.setBackground(Color.green);
        cJ6.setEnabled(false);
          if(cJ1.getBackground() == Color.green && cJ2.getBackground() == Color.green && cJ3.getBackground() == Color.green
                && cJ4.getBackground() == Color.green && cJ5.getBackground() == Color.green && cJ6.getBackground() == Color.green
                && cJ7.getBackground() == Color.green){

            aceptarJugs.setEnabled(true);

        }//END_IF
    }//GEN-LAST:event_cJ6ActionPerformed

    private void cJ7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cJ7ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 7;
        nextpane = ConfigJugadoresGui;
        previouspane = ConfigJugadoresGui;
        ConfigJugadoresGui.setVisible(false);
        incorrecto.setVisible(false);
        LoginGui2.setVisible(true);
        getRootPane().setContentPane(LoginGui2);
        cJ7.setBackground(Color.green);
        cJ7.setEnabled(false);
          if(cJ1.getBackground() == Color.green && cJ2.getBackground() == Color.green && cJ3.getBackground() == Color.green
                && cJ4.getBackground() == Color.green && cJ5.getBackground() == Color.green && cJ6.getBackground() == Color.green
                && cJ7.getBackground() == Color.green){

            aceptarJugs.setEnabled(true);

        }//END_IF
    }//GEN-LAST:event_cJ7ActionPerformed


    /* @author Victor
     * Codigo que se ejecuta cuando se le da al boton registrar de la pantalla login gui 2
     */
    private void registrar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrar2ActionPerformed
        // TODO add your handling code here:
        IntroGui.setVisible(false);
        RegistrarGui.setVisible(true);
        getRootPane().setContentPane(RegistrarGui);
        existente.setVisible(false);
        nextpanereg = LoginGui2;
        previouspanereg = LoginGui2;
    }//GEN-LAST:event_registrar2ActionPerformed


    @Override
    /* @author Joan
     * Codigo que se genera al apretar el boton cargar partida del menu principal
     */
    protected void CargarPartidaActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        LoginGui.setVisible(false);
        CargarPartidaGui.setVisible(true);
        getRootPane().setContentPane(CargarPartidaGui);
        int partssize = 0;
        String[] parts = {""};
        try {
            parts = GestorDisco.GetPartidas();
            partssize=parts.length;

        }//END_TRY
        catch (DiscoException e){
            e.printStackTrace();

        }//END_CATCH

        for( int i=0; i<partssize; i++){
           partidaacargar.addItem( parts[i] );

        }//END_FOR
    
    }//END_METODE

    /* @author Joan
     * Codigo que se ejecuta cuando se le da al boton aceptar de la pantalla login gui 2,
     * controla que no se logueen dos veces con el mismo user
     */

    private void aceptar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptar2ActionPerformed
        // TODO add your handling code here:

        try{
            if (ControladorUsuario.validarLogin(user.getText(), pass.getText())) {
                
                boolean b = comprobar(user.getText());
                if(!b){
                    Users.addElement(user.getText());
                    u = (Humano)GestorUsuarios.carregarUsuari(user.getText(), pass.getText());
                    Usuarionombre.setText(u.getLogin());
                    Usuariocontrase√±a.setText(u.getPassword());
                    Usuariocontrase√±anueva.setText(u.getPassword());
                    cBJ.p.jugadores[jugadorTratado].setUser(u);
                    LoginGui2.setVisible(false);
                    nextpane.setVisible(true);
                    getRootPane().setContentPane(nextpane);

                }//END_IF
                else{
                    incorrecto.setVisible(true);
                }//END_ELSE
                
            }//END_IF

            else {

                incorrecto.setVisible(true);

            }//END_ELSE

        }//END_TRY

        catch (UsuariInexistent e){

            incorrecto.setVisible(true);

        }//END_CATCH

        user.setText("");
        pass.setText("");
    }//GEN-LAST:event_aceptar2ActionPerformed


    /* @author Joan
     * Funcion que permite controlar que no se logueen dos usuarios
     * con el mismo user
     */

    private boolean comprobar(String s){

        int i = 0;
        while(i<Users.size()){

            if(Users.elementAt(i).equals(s)){

                return true;
            }//END_IF

            i++;
        }//END_WHILE
        return false;
        
    }//END_METODE

    /* @author Joan
     * Codigo que se ejecuta cuando se le da al boton cancelar de la pantalla login gui 2
     * aqui, como no se ha cargado el jugador, el boton lo volvemos a poner a su color por
     * defecto, para que asi, no nos deje avanzar de pantalla todavia
     */

    private void cancelar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar2ActionPerformed
        // TODO add your handling code here:
        LoginGui.setVisible(false);
        previouspane.setVisible(true);
        getRootPane().setContentPane(previouspane);
        user.setText("");
        pass.setText("");
        switch(jugadorTratado){

            case 1: cJ1.setBackground(c);
                    cJ1.setForeground(Color.BLACK);
                    cJ1.setEnabled(true);
                    break;

            case 2: cJ2.setBackground(c);
                    cJ2.setForeground(Color.BLACK);
                    cJ2.setEnabled(true);
                    break;

            case 3: cJ3.setBackground(c);
                    cJ3.setForeground(Color.BLACK);
                    cJ3.setEnabled(true);
                    break;

            case 4: cJ4.setBackground(c);
                    cJ4.setForeground(Color.BLACK);
                    cJ4.setEnabled(true);
                    break;

            case 5: cJ5.setBackground(c);
                    cJ5.setForeground(Color.BLACK);
                    cJ5.setEnabled(true);
                    break;

            case 6: cJ6.setBackground(c);
                    cJ6.setForeground(Color.BLACK);
                    cJ6.setEnabled(true);
                    break;

            case 7: cJ7.setBackground(c);
                    cJ7.setForeground(Color.BLACK);
                    cJ7.setEnabled(true);
                    break;


        }//END_SWITCH
    }//GEN-LAST:event_cancelar2ActionPerformed

    @Override
    /* @author Joan
     * Codigo que se ejecuta al haber seleccionado que partida cargar i se le ha dado al aceptar,
     * basicamente se prepara la siguiente pantalla, LJ son los labels de jugador, y VJ son los botones
     * validar, que solo saldran en el caso de ser jugadores humanos. Se hace algo similar a lo que se hace
     * al iniciar una partida normal, en el punto de cargar a los usuarios.
     */
    protected void cargaraceptarActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        int numJ = 0;
        int aMini = 0;
        int aMaxi = 0;
        boolean nohuman = true;
        LJ1.setVisible(false);
        LJ2.setVisible(false);
        LJ3.setVisible(false);
        LJ4.setVisible(false);
        LJ5.setVisible(false);
        LJ6.setVisible(false);
        LJ7.setVisible(false);
        VJ1.setVisible(false);
        VJ2.setVisible(false);
        VJ3.setVisible(false);
        VJ4.setVisible(false);
        VJ5.setVisible(false);
        VJ6.setVisible(false);
        VJ7.setVisible(false);
              


        if(partidaacargar.getSelectedItem() != null){

            String s = partidaacargar.getSelectedItem().toString();
            cBJ.CargarPartida(s);
            numJ = cBJ.p.getNumJugadores();
            aMini = cBJ.p.getApostaMinima();
            aMaxi = cBJ.p.getApostaMinima();

            switch(numJ-1){

                case 2: LJ1.setVisible(true);
                        if(cBJ.p.jugadores[1].usuario != null){
                            
                            nohuman = false;
                            LJ1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                            VJ1.setVisible(true);
                        }//END_IF
                        else{
                            VJ1.setBackground(Color.ORANGE);

                        }//END_ELSE
                        LJ2.setVisible(true);
                        if(cBJ.p.jugadores[2].usuario != null){
                            
                            nohuman = false;
                            LJ2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                            VJ2.setVisible(true);
                        }//END_IF
                        else{
                            VJ2.setBackground(Color.ORANGE);
                        }//END_ELSE

                        VJ3.setBackground(Color.ORANGE);
                        VJ4.setBackground(Color.ORANGE);
                        VJ5.setBackground(Color.ORANGE);
                        VJ6.setBackground(Color.ORANGE);
                        VJ7.setBackground(Color.ORANGE);

                        break;

                 case 3:LJ1.setVisible(true);
                        if(cBJ.p.jugadores[1].usuario != null){
                            nohuman = false;
                            LJ1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                            VJ1.setVisible(true);
                        }//END_IF
                        else{
                            VJ1.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ2.setVisible(true);
                        if(cBJ.p.jugadores[2].usuario != null){
                            nohuman = false;
                            LJ2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                            VJ2.setVisible(true);
                        }//END_IF
                        else{
                            VJ2.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ3.setVisible(true);
                        if(cBJ.p.jugadores[3].usuario != null){
                            nohuman = false;
                            LJ3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                            VJ3.setVisible(true);
                        }//END_IF
                        else{
                            VJ3.setBackground(Color.ORANGE);
                        }//END_ELSE

                        VJ4.setBackground(Color.ORANGE);
                        VJ5.setBackground(Color.ORANGE);
                        VJ6.setBackground(Color.ORANGE);
                        VJ7.setBackground(Color.ORANGE);

                        break;

                 case 4:LJ1.setVisible(true);
                        if(cBJ.p.jugadores[1].usuario != null){
                            nohuman = false;
                            LJ1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                            VJ1.setVisible(true);
                        }//END_IF
                        else{
                            VJ1.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ2.setVisible(true);
                        if(cBJ.p.jugadores[2].usuario != null){
                            nohuman = false;
                            LJ2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                            VJ2.setVisible(true);
                        }//END_IF
                        else{
                            VJ2.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ3.setVisible(true);
                        if(cBJ.p.jugadores[3].usuario != null){
                            nohuman = false;
                            LJ3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                            VJ3.setVisible(true);
                        }//END_IF
                        else{
                            VJ3.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ4.setVisible(true);
                        if(cBJ.p.jugadores[4].usuario != null){
                            nohuman = false;
                            LJ4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                            VJ4.setVisible(true);
                        }//END_IF
                        else{
                            VJ4.setBackground(Color.ORANGE);
                        }//END_ELSE

                        VJ5.setBackground(Color.ORANGE);
                        VJ6.setBackground(Color.ORANGE);
                        VJ7.setBackground(Color.ORANGE);

                        break;

                 case 5:LJ1.setVisible(true);
                        if(cBJ.p.jugadores[1].usuario != null){
                            nohuman = false;
                            LJ1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                            VJ1.setVisible(true);
                        }//END_IF
                        else{
                            VJ1.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ2.setVisible(true);
                        if(cBJ.p.jugadores[2].usuario != null){
                            nohuman = false;
                            LJ2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                            VJ2.setVisible(true);
                        }//END_IF
                        else{
                            VJ2.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ3.setVisible(true);
                        if(cBJ.p.jugadores[3].usuario != null){
                            nohuman = false;
                            LJ3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                            VJ3.setVisible(true);
                        }//END_IF
                        else{
                            VJ3.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ4.setVisible(true);
                        if(cBJ.p.jugadores[4].usuario != null){
                            nohuman = false;
                            LJ4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                            VJ4.setVisible(true);
                        }//END_IF
                        else{
                            VJ4.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ5.setVisible(true);
                        if(cBJ.p.jugadores[5].usuario != null){
                            nohuman = false;
                            LJ5.setText(cBJ.p.jugadores[5].usuario.getLogin());
                            VJ5.setVisible(true);
                        }//END_IF
                        else{
                            VJ5.setBackground(Color.ORANGE);
                        }//END_ELSE

                        VJ6.setBackground(Color.ORANGE);
                        VJ7.setBackground(Color.ORANGE);

                        break;

               case 6:  LJ1.setVisible(true);
                        if(cBJ.p.jugadores[1].usuario != null){
                            nohuman = false;
                            LJ1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                            VJ1.setVisible(true);
                        }//END_IF
                        else{
                            VJ1.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ2.setVisible(true);
                        if(cBJ.p.jugadores[2].usuario != null){
                            nohuman = false;
                            LJ2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                            VJ2.setVisible(true);
                        }//END_IF
                        else{
                            VJ2.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ3.setVisible(true);
                        if(cBJ.p.jugadores[3].usuario != null){
                            nohuman = false;
                            LJ3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                            VJ3.setVisible(true);
                        }//END_IF
                        else{
                            VJ3.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ4.setVisible(true);
                        if(cBJ.p.jugadores[4].usuario != null){
                            nohuman = false;
                            LJ4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                            VJ4.setVisible(true);
                        }//END_IF
                        else{
                            VJ4.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ5.setVisible(true);
                        if(cBJ.p.jugadores[5].usuario != null){
                            nohuman = false;
                            LJ5.setText(cBJ.p.jugadores[5].usuario.getLogin());
                            VJ5.setVisible(true);
                        }//END_IF
                        else{
                            VJ5.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ6.setVisible(true);
                        if(cBJ.p.jugadores[6].usuario != null){
                            nohuman = false;
                            LJ6.setText(cBJ.p.jugadores[6].usuario.getLogin());
                            VJ6.setVisible(true);
                        }//END_IF
                        else{
                            VJ6.setBackground(Color.ORANGE);
                        }//END_ELSE

                        VJ7.setBackground(Color.ORANGE);
                        
                        break;

               case 7:  LJ1.setVisible(true);
                        if(cBJ.p.jugadores[1].usuario != null){
                            nohuman = false;
                            LJ1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                            VJ1.setVisible(true);
                        }//END_IF
                        else{
                            VJ1.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ2.setVisible(true);
                        if(cBJ.p.jugadores[2].usuario != null){
                            nohuman = false;
                            LJ2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                            VJ2.setVisible(true);
                        }//END_IF
                        else{
                            VJ2.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ3.setVisible(true);
                        if(cBJ.p.jugadores[3].usuario != null){
                            nohuman = false;
                            LJ3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                            VJ3.setVisible(true);
                        }//END_IF
                        else{
                            VJ3.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ4.setVisible(true);
                        if(cBJ.p.jugadores[4].usuario != null){
                            nohuman = false;
                            LJ4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                            VJ4.setVisible(true);
                        }//END_IF
                        else{
                            VJ4.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ5.setVisible(true);
                        if(cBJ.p.jugadores[5].usuario != null){
                            nohuman = false;
                            LJ5.setText(cBJ.p.jugadores[5].usuario.getLogin());
                            VJ5.setVisible(true);
                        }//END_IF
                        else{
                            VJ5.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ6.setVisible(true);
                        if(cBJ.p.jugadores[6].usuario != null){
                            nohuman = false;
                            LJ6.setText(cBJ.p.jugadores[6].usuario.getLogin());
                            VJ6.setVisible(true);
                        }//END_IF
                        else{
                            VJ6.setBackground(Color.ORANGE);
                        }//END_ELSE
                        LJ7.setVisible(true);
                        if(cBJ.p.jugadores[7].usuario != null){
                            nohuman = false;
                            LJ7.setText(cBJ.p.jugadores[7].usuario.getLogin());
                            VJ7.setVisible(true);
                        }//END_IF
                        else{
                            VJ7.setBackground(Color.ORANGE);
                        }//END_ELSE
                        break;

            }//END_SWITCH
            if(!nohuman){
                jugar.setEnabled(false);
            }//END_IF
            
            CargarPartidaGui.setVisible(false);
            recuperarJugs.setVisible(true);
            getRootPane().setContentPane(recuperarJugs);
        
        }//END_IF

    }//END_METODE


    private void aMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aMinActionPerformed

    /* @author Joan
     * Codigo que se ejecuta al apretar el boton jugar de la pantalla de configuracion de partida
     * Basicamente comprueba que sea correcto todo y prepara la pantalla de juego.
     */
    private void jugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jugActionPerformed

        
        cBJ.maquines_default();
             
        int aMi = Integer.parseInt(aMin.getText());
        int aMx = Integer.parseInt(aMax.getText());
        
        if(aMi > aMx){

            jTextField1.setText("Pon dos valores tales que aMinima menor que aMaxima");
            aMin.setText("");
            aMax.setText("");

        }//END_IF

        if((!aMin.getText().equals("")) && (!aMax.getText().equals(""))){
            cBJ.p.setApostaMinima((aMi));
            cBJ.p.setApostaMaxima((aMx));
            aMinim.setText(String.valueOf(aMi));
            aMa.setText(String.valueOf(aMx));
            
            switch(nJug){

                case 2: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        F3.setVisible(false);
                        F4.setVisible(false);
                        F5.setVisible(false);
                        F6.setVisible(false);
                        F7.setVisible(false);
                        P3.setVisible(false);
                        P4.setVisible(false);
                        P5.setVisible(false);
                        P6.setVisible(false);
                        P7.setVisible(false);
                        N3.setVisible(false);
                        N4.setVisible(false);
                        N5.setVisible(false);
                        N6.setVisible(false);
                        N7.setVisible(false);
                        T3.setVisible(false);
                        T4.setVisible(false);
                        T5.setVisible(false);
                        T6.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF

                        break;

                case 3: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        F4.setVisible(false);
                        F5.setVisible(false);
                        F6.setVisible(false);
                        F7.setVisible(false);
                        P4.setVisible(false);
                        P5.setVisible(false);
                        P6.setVisible(false);
                        P7.setVisible(false);
                        N4.setVisible(false);
                        N5.setVisible(false);
                        N6.setVisible(false);
                        N7.setVisible(false);
                        T4.setVisible(false);
                        T5.setVisible(false);
                        T6.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF

                        break;

                case 4: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        P4.setText(String.valueOf(0));
                        F5.setVisible(false);
                        F6.setVisible(false);
                        F7.setVisible(false);
                        P5.setVisible(false);
                        P6.setVisible(false);
                        P7.setVisible(false);
                        N5.setVisible(false);
                        N6.setVisible(false);
                        N7.setVisible(false);
                        T5.setVisible(false);
                        T6.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[4].usuario != null){

                            N4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                        }//END_IF
                        break;

                case 5: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                        F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        P4.setText(String.valueOf(0));
                        P5.setText(String.valueOf(0));
                        F6.setVisible(false);
                        F7.setVisible(false);
                        P6.setVisible(false);
                        P7.setVisible(false);
                        N6.setVisible(false);
                        N7.setVisible(false);
                        T6.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[4].usuario != null){

                            N4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[5].usuario != null){

                            N5.setText(cBJ.p.jugadores[5].usuario.getLogin());
                        }//END_IF
                        break;

                case 6: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                        F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                        F6.setText(String.valueOf(cBJ.p.jugadores[6].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        P4.setText(String.valueOf(0));
                        P5.setText(String.valueOf(0));
                        P6.setText(String.valueOf(0));
                        F7.setVisible(false);
                        P7.setVisible(false);
                        N7.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[4].usuario != null){

                            N4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[5].usuario != null){

                            N5.setText(cBJ.p.jugadores[5].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[6].usuario != null){

                            N6.setText(cBJ.p.jugadores[6].usuario.getLogin());
                        }//END_IF
                        break;

                case 7: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                        F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                        F6.setText(String.valueOf(cBJ.p.jugadores[6].chips));
                        F7.setText(String.valueOf(cBJ.p.jugadores[7].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        P4.setText(String.valueOf(0));
                        P5.setText(String.valueOf(0));
                        P6.setText(String.valueOf(0));
                        P7.setText(String.valueOf(0));
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[4].usuario != null){

                            N4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[5].usuario != null){

                            N5.setText(cBJ.p.jugadores[5].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[6].usuario != null){

                            N6.setText(cBJ.p.jugadores[6].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[7].usuario != null){

                            N7.setText(cBJ.p.jugadores[7].usuario.getLogin());
                        }//END_IF
                        break;


            }//END_SWITCH

            iniPartida.setEnabled(true);
            apuest.setVisible(false);
            apuesta.setVisible(false);
            apostar.setVisible(false);
            hit.setVisible(false);
            doblar.setVisible(false);
            insurance.setVisible(false);
            stand.setVisible(false);
            gPartida.setVisible(false);
            SalG.setVisible(false);
            split.setVisible(false);
            ConfigPartidaGui.setVisible(false);
            PartidaGui.setVisible(true);
            getRootPane().setContentPane(PartidaGui);
       
        }//END_IF
    }//GEN-LAST:event_jugActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /* @author Guillem
     * Codigo que se ejecuta al apretar volver de la pantalla de estadisticas y achievements
     */
    private void retornoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retornoActionPerformed
        // TODO add your handling code here:

        EstadisticasGui.setVisible(false);
        IntroGui.setVisible(true);
        getRootPane().setContentPane(IntroGui);
    }//GEN-LAST:event_retornoActionPerformed

    private void PMGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PMGActionPerformed


    /* @author Joan
     * Codigo que se ejecuta al apretar el boton iniciar partida de la pantalla de juego
     */
    private void iniPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniPartidaActionPerformed
        // TODO add your handling code here:

        if(cBJ.p.baraja.vmazo.size()<52){

            cBJ.p.baraja = new Mazo(6,false);
            cBJ.p.baraja.barajar();
            cBJ.p.Descarte = new int [10];
            
        }//END_IF

        int ce =1;
        int cont = 1;

        //Comprobamos si quedan jugadores con fichas

         while(!cBJ.p.jugadores[ce].indagame){

             if(cont == nJug){
                 PartidaGui.setVisible(false);
                 popupGui.setVisible(true);
                 SalG.setVisible(false);
                 cancSalir.setVisible(false);
                 getRootPane().setContentPane(popupGui);
                 popupGui.setBackground(Color.BLACK);
                 titol.setForeground(Color.RED);
                 titol.setText("GAME OVER");
                 salSinG.setText("Salir");
                 return;

             }//END_IF
             cont++;
             ce++;

         }//END_WHILE

        jugadorActual = cBJ.p.getJugadorActual();
        manoActual = 0;
        asegurado = false;
        ases = false;
        iniPartida.setEnabled(false);
        T1.setBackground(Color.BLACK);
        P1.setText(String.valueOf(0));
        P2.setText(String.valueOf(0));
        P3.setText(String.valueOf(0));
        P4.setText(String.valueOf(0));
        P5.setText(String.valueOf(0));
        P6.setText(String.valueOf(0));
        P7.setText(String.valueOf(0));
        flush();
        ImageIcon i = new ImageIcon("");
        CC1.setIcon(i);
        CC2.setIcon(i);
        CC3.setIcon(i);
        CC4.setIcon(i);
        CC5.setIcon(i);
        CC6.setIcon(i);
        CC7.setIcon(i);
        gPartida.setVisible(false);
        SalG.setVisible(false);

        if(!cBJ.p.jugadores[1].indagame){

                    T1.setBackground(Color.WHITE);

                    cBJ.p.calcularSiguiente();
                    jugadorActual = cBJ.p.getJugadorActual();

                    switch(jugadorActual){

                    case 1: T1.setBackground(Color.BLACK);
                            break;

                    case 2: T2.setBackground(Color.BLACK);
                            break;

                    case 3: T3.setBackground(Color.BLACK);
                            break;

                    case 4: T4.setBackground(Color.BLACK);
                            break;

                    case 5: T5.setBackground(Color.BLACK);
                            break;

                    case 6: T6.setBackground(Color.BLACK);
                            break;

                    case 7: T7.setBackground(Color.BLACK);
                           break;
                    
                    }//END_SWITCH

                    if(cBJ.p.jugadores[jugadorActual].iebj != null){
            
                        apostar_maquina();                     
                            
                    }//END_IF
                    
                    else{

                        apuesta.setVisible(true);
                        apuesta.setText("");
                        apostar.setVisible(true);
                        apuest.setVisible(true);
                        aviso.setVisible(false);
                        pCroup.setText("");

                    }//END_ELSE
        }//END_IF
        else{
             //Esto es indicativo de que es un jugador maquina
             if(cBJ.p.jugadores[jugadorActual].iebj != null){

                  apostar_maquina();

             }//END_IF

             else{
            
                apuest.setVisible(true);
                apostar.setVisible(true);
                apuesta.setVisible(true);
                apuesta.setText("");
                pCroup.setText("");
                aviso.setVisible(false);
             
             }//END_ELSE
            
        }//END_ELSE

    }//GEN-LAST:event_iniPartidaActionPerformed

    /* @author Victor
     * Codigo para que la maquina juegue cuando tiene el turno.
     */

    private void jugar_maquina(){

            Mano m23 = null;
            aviso.setText("Juga la maquina, apreta Stand");
            aviso.setVisible(true);
            boolean Stand = false;
            m23 = (Mano)cBJ.p.jugadores[jugadorActual].manos.elementAt(manoActual);

            int Decision = 0;

            //La maquina toma sus decisiones
            while(!Stand){

                m23 = (Mano)cBJ.p.jugadores[jugadorActual].manos.elementAt(manoActual);

                if(!(ieb.nomEstrategia.equals("Dificil"))){
                     Decision = ieb.elegir(m23.getPuntuacion(),cBJ.p.croupier.getPuntuacion());
                }//END_IF
                else{
                     Decision = ieb.elegirHard(m23.getPuntuacion(),cBJ.p.Descarte);
                }//END_ELSE


                switch(Decision){

                            case 0:cBJ.hit(0);
                                   actualizar_puntuacion();
                                   break;


                            case 1:
                                   Mano mai = (Mano)cBJ.p.jugadores[jugadorActual].manos.elementAt(0);
                                   if(mai.cartas.size() == 2 && mai.getApuesta() <= cBJ.p.jugadores[jugadorActual].getChips()){
                                       cBJ.doblar(manoActual);
                                       ocultar();
                                       actualizar_puntuacion();
                                       actualizar_fichas();
                                       stand.setVisible(true);
                                       pintar_cartes(true);
                                       Stand = true;
                                   }//END_IF
                                   else{
                                       cBJ.hit(0);
                                       actualizar_puntuacion();
                                   }//END_ELSE

                                   break;


                            case 2: stand.setVisible(true);
                                    actualizar_puntuacion();
                                    pintar_cartes(true);
                                    Stand = true;
                                    break;
                }//END_SWITCH
           }//END_WHILE
     }//END_METODE



    /* @author Joan
     * Funcion para que la maquina apueste cuando tiene el turno. Apuesta siempre un 10% de sus fichas,
     * en el caso de que ese 10% sea superior a la apuesta maxima, apuesta la apuesta maxima.
     */
    private void apostar_maquina(){
        
        ocultar();

        int fichas = cBJ.p.jugadores[jugadorActual].chips;
        int apuesta2 = (int)(fichas * 0.1);
        
       if(apuesta2 >= Integer.parseInt(aMinim.getText())){
            if(apuesta2 <= Integer.parseInt(aMa.getText())){
            }//END_IF
            else{
                apuesta2 = Integer.parseInt(aMa.getText());
            }//END_ELSE
        }
        else{
                apuesta2 = Integer.parseInt(aMinim.getText());
        }//END_ELSE

            //Ponemos su marcador de turno a blanco
            switch(jugadorActual){

                case 1: T1.setBackground(Color.WHITE);
                        break;

                case 2: T2.setBackground(Color.WHITE);
                        break;

                case 3: T3.setBackground(Color.WHITE);
                        break;

                case 4: T4.setBackground(Color.WHITE);
                        break;

                case 5: T5.setBackground(Color.WHITE);
                        break;

                case 6: T6.setBackground(Color.WHITE);
                        break;

                case 7: T7.setBackground(Color.WHITE);
                        break;
            }//END_SWITCH

            cBJ.aposta_ini(apuesta2);
            actualizar_fichas();
            jugadorActual = cBJ.p.getJugadorActual();

            int elprimero =1;
            int contadorrr = 1;

            //Buscamos cual es el primer jugador que esta jugando todavia
            while(contadorrr<=nJug){

                if(cBJ.p.jugadores[contadorrr].indagame){
                    elprimero = contadorrr;
                    break;
                }//END_IF
                contadorrr++;

            }//END_WHILE

           if(cBJ.p.jugadores[jugadorActual].iebj !=null && jugadorActual != elprimero){

            apostar_maquina();
            return;
        }//END_IF
                
            //Como al hacer aposta inicial, pasamos el turno, ponemos el cuadro de turno del siguiente jugador a negro
            switch(jugadorActual){

                case 1: T1.setBackground(Color.BLACK);
                        break;

                case 2: T2.setBackground(Color.BLACK);
                        break;

                case 3: T3.setBackground(Color.BLACK);
                        break;

                case 4: T4.setBackground(Color.BLACK);
                        break;

                case 5: T5.setBackground(Color.BLACK);
                        break;

                case 6: T6.setBackground(Color.BLACK);
                        break;

                case 7: T7.setBackground(Color.BLACK);
                        break;
            }//END_SWITCH

            elprimero =1;
            contadorrr = 1;

            //Buscamos cual es el primer jugador que esta jugando todavia
            while(contadorrr<=nJug){

                if(cBJ.p.jugadores[contadorrr].indagame){
                    elprimero = contadorrr;
                    break;
                }//END_IF
                contadorrr++;

            }//END_WHILE

        if(jugadorActual == elprimero){

                cBJ.p.baraja.barajar();
                apostar.setVisible(false);
                apuest.setVisible(false);
                apuesta.setVisible(false);
                cBJ.cartes_inicials();
                pCroup.setText(String.valueOf(cBJ.p.croupier.getPuntuacion()));
                actualizar_puntuacion();


                if(cBJ.p.jugadores[jugadorActual].iebj !=null){

                    pintar_cartes(false);
                    jugar_maquina();
                      
                }//END_IF

                else{
                    pintar_cartes(true);
                    pintar_cartes(false);
                    actualizar_puntuacion();
                    calculoDeOps(manoActual);
                }//END_ELSE


        }//END_IF
        else{
                
                apuest.setVisible(true);
                apostar.setVisible(true);
                apuesta.setVisible(true);
                apuesta.setText("");
                pCroup.setText("");
                aviso.setVisible(false);
        }//END_ELSE

}//END_METODE
    
    
    /* @author Victor
     * Pantalla que sale cuando apretas abandonar partida de la partida de juego,
     * basicamente te manda a popup gui, que te ofrece las opciones que tienes
     */
    private void abandPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abandPartidaActionPerformed
        // TODO add your handling code here:

        PartidaGui.setVisible(false);
        popupGui.setVisible(true);
        getRootPane().setContentPane(popupGui);
        
    }//GEN-LAST:event_abandPartidaActionPerformed

    /* @author Victor
     * Elegimos guardar partida en la pantalla de juego, eso te lleva a la pantalla de
     * guardar partida
     */
    private void gPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gPartidaActionPerformed
        // TODO add your handling code here:
        PartidaGui.setVisible(false);
        GuardarGui.setVisible(true);
        getRootPane().setContentPane(GuardarGui);
    }//GEN-LAST:event_gPartidaActionPerformed

    /* @author Victor
     * Elegimos Salir sin guardar de la pantalla popupGui, Basicamente te actualiza
     * las estadisticas, el ranking, limpia la pantalla i te lleva a la principal
     */

    private void salSinGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salSinGActionPerformed
        // TODO add your handling code here:

        cBJ.ActualizarEstadisticas();

        
        int p = 1;
        while(p<=nJug){

            try{
            cRA.cargarRanking();
            }//END_TRY

            catch(Exception er){

        }//END_CATCH

            if(cBJ.p.jugadores[p].usuario!=null){

                  cRA.actualizarRanking(cBJ.p.jugadores[p].usuario.getLogin(),cBJ.p.jugadores[p].usuario.getEst().getPuntuacionMedia() );

            }//END_IF
            else if(cBJ.p.jugadores[p].iebj != null){

                Maquina m = new Maquina();
                try{
                m = cBJ.carregarMaquina(cBJ.p.jugadores[p].iebj.nomEstrategia);
                }
                catch(Exception e1){
                    e1.printStackTrace();
                }
                cRA.actualizarRanking(cBJ.p.jugadores[p].iebj.nomEstrategia,m.est.getPuntuacionMedia());
            }
            p++;

             try{
                cRA.guardarRanking();
            }//END_TRY
            catch(Exception e){

            }//END_CATCH
        }//END_WHILE

       

        //Limpiamos las pantallas

        initComponents();
        popupGui.setVisible(false);
        IntroGui.setVisible(true);
        getRootPane().setContentPane(IntroGui);
        PartidaGui.setVisible(false);
        ConfigJugadoresGui.setVisible(false);
        LoginGui2.setVisible(false);
        EstadisticasGui.setVisible(false);
        popupGui.setVisible(false);
        

    }//GEN-LAST:event_salSinGActionPerformed


    @Override
    /* @author Guillem
     * Codigo que se ejecuta cuando apretas el boton ranking de la pantalla inicial,
     * basicamente carga el ranking, y te lo ense√±a por pantalla
     */
    protected void RankingActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        IntroGui.setVisible(false);
        RankingGui.setVisible(true);
        getRootPane().setContentPane(RankingGui);
        try{
            cRA.cargarRanking();
        }//END_TRY
        catch(Exception e){

        }//EN_CATCH

        Ranking[] j = new Ranking[10];
        j= cRA.mostrarRanking();
        usuario1.setText(j[0].getLogin());
        punt1.setText(String.valueOf(j[0].getMediana()));
        usuario2.setText(j[1].getLogin());
        punt2.setText(String.valueOf(j[1].getMediana()));
        usuario3.setText(j[2].getLogin());
        punt3.setText(String.valueOf(j[2].getMediana()));
        usuario4.setText(j[3].getLogin());
        punt4.setText(String.valueOf(j[3].getMediana()));
        usuario5.setText(j[4].getLogin());
        punt5.setText(String.valueOf(j[4].getMediana()));
        usuario6.setText(j[5].getLogin());
        punt6.setText(String.valueOf(j[5].getMediana()));
        usuario7.setText(j[6].getLogin());
        punt7.setText(String.valueOf(j[6].getMediana()));
        usuario8.setText(j[7].getLogin());
        punt8.setText(String.valueOf(j[7].getMediana()));
        usuario9.setText(j[8].getLogin());
        punt9.setText(String.valueOf(j[8].getMediana()));
        usuario10.setText(j[9].getLogin());
        punt10.setText(String.valueOf(j[9].getMediana()));
    }//END_METODE


    /* @author Guillem
     * Se elige la opcion salir guardando de la pantalla popup gui, te lleva a la pantalla de guardar partida
     */
    private void SalGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalGActionPerformed
        // TODO add your handling code here:
        
        popupGui.setVisible(false);
        GuardarGui.setVisible(true);
        getRootPane().setContentPane(GuardarGui);

    }//GEN-LAST:event_SalGActionPerformed

    /* @author Guillem
     * Seleccionas cancelar en popup gui, basicamente vuelves a la pantalla de juego
     */
    private void cancSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancSalirActionPerformed
        // TODO add your handling code here:
        popupGui.setVisible(false);
        PartidaGui.setVisible(true);
        getRootPane().setContentPane(PartidaGui);
    }//GEN-LAST:event_cancSalirActionPerformed

    private void partidaGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partidaGuardarActionPerformed

    }//GEN-LAST:event_partidaGuardarActionPerformed

    /* @author Victor
     * Apretas cancelar en la pantalla de guardar, eso te devuelve a la pantalla de juego
     */
    private void cancelGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelGActionPerformed
        // TODO add your handling code here:

        GuardarGui.setVisible(false);
        PartidaGui.setVisible(true);
        getRootPane().setContentPane(PartidaGui);
    }//GEN-LAST:event_cancelGActionPerformed

    /* @author Guillem
     * Se apreta guardar en la pantalla de guardar, en caso de que se guarde correctamente,
     * te devuelve al meno principal, si no es asi, te avisa
     */
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
  
        String partida = partidaGuardar.getText();
        boolean b = false;      
        b = cBJ.GuardarPartida(cBJ.p, partida);

        //Se ha guardado correctamente
        if(b){

            GuardarGui.setVisible(false);
            IntroGui.setVisible(true);
            getRootPane().setContentPane(IntroGui);
            initComponents();
            PartidaGui.setVisible(false);
            ConfigJugadoresGui.setVisible(false);
            LoginGui2.setVisible(false);
            EstadisticasGui.setVisible(false);
            popupGui.setVisible(false);
        }//END_IF

        //No se ha guardado Correctamente
        else{

            avi.setText("Fallo al guardar");
            avi.setVisible(true);
        }//END_ELSE
        
    }//GEN-LAST:event_guardarActionPerformed

    /* @author Guillem
     * Se ejecuta cuando apretas hit, mientras estas jugando, basicamente
     * pides otra carta. En el caso de que seas un jugador maquina, este boton no hace nada
     * y te avisa de que tienes que darle al stand.
     */
    private void hitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hitActionPerformed
        // TODO add your handling code here:

            aviso.setVisible(false);
            cBJ.hit(manoActual);      
            ocultar();
            actualizar_puntuacion();
            pintar_cartes(true);
            calculoDeOps(manoActual);


    }//GEN-LAST:event_hitActionPerformed

    /* @author Joan
     * Metodo que actualiza la puntuacion en la pantalla de juego del jugador actual
     */
    private void actualizar_puntuacion(){
        
        switch(jugadorActual){

            case 1: Mano m1 = (Mano)cBJ.p.jugadores[1].manos.elementAt(manoActual);
                    P1.setText(String.valueOf(m1.getPuntuacion()));
                    break;

            case 2:
                    Mano m2 = (Mano)cBJ.p.jugadores[2].manos.elementAt(manoActual);
                    P2.setText(String.valueOf(m2.getPuntuacion()));
                    break;

            case 3:
                    Mano m3 = (Mano)cBJ.p.jugadores[3].manos.elementAt(manoActual);
                    P3.setText(String.valueOf(m3.getPuntuacion()));
                    break;

            case 4:
                    Mano m4 = (Mano)cBJ.p.jugadores[4].manos.elementAt(manoActual);
                    P4.setText(String.valueOf(m4.getPuntuacion()));
                    break;

            case 5:
                    Mano m5 = (Mano)cBJ.p.jugadores[5].manos.elementAt(manoActual);
                    P5.setText(String.valueOf(m5.getPuntuacion()));
                    break;

            case 6:
                    Mano m6 = (Mano)cBJ.p.jugadores[6].manos.elementAt(manoActual);
                    P6.setText(String.valueOf(m6.getPuntuacion()));
                    break;

            case 7:
                    Mano m7 = (Mano)cBJ.p.jugadores[7].manos.elementAt(manoActual);
                    P7.setText(String.valueOf(m7.getPuntuacion()));
                    break;
        }//END_SWITCH

    }//END_METODE

    /* @author Joan
     * Codigo que se ejecuta al clicar el boton apostar de la pantalla de juego, en caso de que seas maquina,
     * tienes que apretarlo para avanzar, pero la apuesta la calculara sin que introduzcas nada.
     */
    private void apostarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apostarActionPerformed
        // TODO add your handling code here:

        ocultar();
        jugadorActual = cBJ.p.getJugadorActual();
        aviso.setText("");
        aviso.setVisible(false);

        if(cBJ.p.jugadores[jugadorActual].iebj !=null){

            apostar_maquina();
            return;
        }//END_IF

       int apuesta2 = Integer.parseInt(apuesta.getText());

       //Esta la apuesta entre los margenes correctos?
        if(apuesta2 >= Integer.parseInt(aMinim.getText()) && apuesta2 <= Integer.parseInt(aMa.getText()) && apuesta2 <= cBJ.p.jugadores[jugadorActual].getChips()){

                cBJ.aposta_ini(apuesta2);

                //Se actualizan las chips y se pinta de blanco el cuadro de turno del jugador que ha apostado
                switch(jugadorActual){

                    case 1: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                            T1.setBackground(Color.WHITE);
                            break;

                    case 2: F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                            T2.setBackground(Color.WHITE);
                            break;

                    case 3: F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                            T3.setBackground(Color.WHITE);
                            break;

                    case 4: F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                            T4.setBackground(Color.WHITE);
                            break;

                    case 5: F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                            T5.setBackground(Color.WHITE);
                            break;

                    case 6: F6.setText(String.valueOf(cBJ.p.jugadores[6].chips));
                            T6.setBackground(Color.WHITE);
                            break;

                    case 7: F7.setText(String.valueOf(cBJ.p.jugadores[7].chips));
                            T7.setBackground(Color.WHITE);
                            break;
                }//END_SWITCH

                //Se actualiza el jugador actual (se ha avanzado en apuesta inicial)
                jugadorActual = cBJ.p.getJugadorActual();

                //Se pinta el cuadro de turno del jugador actual
                switch(jugadorActual){

                    case 1: T1.setBackground(Color.BLACK);
                            break;

                    case 2: T2.setBackground(Color.BLACK);
                            break;

                    case 3: T3.setBackground(Color.BLACK);
                            break;

                    case 4: T4.setBackground(Color.BLACK);
                            break;

                    case 5: T5.setBackground(Color.BLACK);
                            break;

                    case 6: T6.setBackground(Color.BLACK);
                            break;

                    case 7: T7.setBackground(Color.BLACK);
                            break;
                }//END_SWITCH

                    int elprimero =1;
                    int contadorrr = 1;

                    while(contadorrr<=nJug){

                        if(cBJ.p.jugadores[contadorrr].indagame){
                            elprimero = contadorrr;
                            break;
                        }//END_IF
                        contadorrr++;

                    }//END_WHILE

                /*Si ya ha apostado todo el mundo, se le da el poder al primer jugador
                 que este en el juego, i se le permite jugar*/
                if(jugadorActual == elprimero){


                        cBJ.p.baraja.barajar();
                        apostar.setVisible(false);
                        apuest.setVisible(false);
                        apuesta.setVisible(false);
                        cBJ.cartes_inicials();
                        pCroup.setText(String.valueOf(cBJ.p.croupier.getPuntuacion()));

                        //Si el primero es maquina
                  
                     if(cBJ.p.jugadores[jugadorActual].iebj !=null){

                        pintar_cartes(false);
                        jugar_maquina();
                          
                     }//END_IF

                     //El primero no es maquina
                     else{
                            pintar_cartes(true);
                            pintar_cartes(false);
                            actualizar_puntuacion();
                            calculoDeOps(manoActual);
                     }//END_ELSE
        }//END_IF
        //Todavia no han apostado todos los jugadores
        else{

                if(cBJ.p.jugadores[jugadorActual].iebj !=null){
                    apostar_maquina();
                }//END_IF

                else{
                    apostar.setVisible(true);
                    apuest.setVisible(true);
                    apuesta.setVisible(true);
                }//END_ELSE
        }//END_ELSE
        
    }//END_IF
    else{
            aviso.setVisible(true);
            aviso.setText("Pon un valor en los margenes correctos");
            apuesta.setText("");
            
    }//END_ELSE
      
    }//GEN-LAST:event_apostarActionPerformed

    /* @author Joan
     * Esta funcion se encarga de mostrar por pantalla las cartas que tienen tanto
     * los jugadores como el croupier
     */
    private void pintar_cartes(boolean es_jugador){

        //aqui pintamos las cartas de un jugador
        if(es_jugador){

            flush();
            Vector label2 = new Vector();
            label2.add(CJ1);
            label2.add(CJ2);
            label2.add(CJ3);
            label2.add(CJ4);
            label2.add(CJ5);
            label2.add(CJ6);
            label2.add(CJ7);
            label2.add(CJ8);
            label2.add(CJ9);
            Vector cartas2 = new Vector();
            int contt = 0;
            Carta d1 = new Carta();
            Mano Manita = new Mano(0);
            Manita = (Mano)cBJ.p.jugadores[jugadorActual].manos.elementAt(manoActual);

            //Cojemos las cartas de la mano del jugador actual
            while(contt<Manita.cartas.size()){

                    d1 = (Carta)Manita.cartas.elementAt(contt);
                    cartas2.add(d1);
                    contt++;
            }//END_WHILE

                int conteitor = 0;
                while(conteitor < cartas2.size()){
                    
                 Carta d = (Carta)cartas2.elementAt(conteitor);

                 //Segun el valor y el palo de una carta, imprimiremos por pantalla una imagen o otra
                 switch(d.getValor()){

                    case 1:
                            if(d.getPalo().equals("Picas")){
                                
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/AP.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);

                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/AD.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/AT.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/AC.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                   case 2:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/2P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/2D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/2T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/2C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                     case 3:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/3P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/3D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/3T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/3C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                      case 4:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/4P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/4D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/4T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/4C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 5:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/5P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/5D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/5T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/5C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 6:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/6P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/6D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/6T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/6C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 7:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/7P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/7D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/7T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/7C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 8:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/8P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/8D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/8T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/8C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                        case 9:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/9P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/9D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/9T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/9C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                        case 10:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/10P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/10D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/10T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/10C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                        case 11:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/JP.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/JD.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/JT.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/JC.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 12:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/QP.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/QD.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/QT.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/QC.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 13:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/KP.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/KD.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/KT.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/KC.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label2.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;
                    }//END_SWITCH
                    conteitor++;
                }//END_WHILE
        }//END_IF

        //Imprimimos las cartas del croupier
        else {
                Vector label = new Vector();
                label.add(CC1);
                label.add(CC2);
                label.add(CC3);
                label.add(CC4);
                label.add(CC5);
                label.add(CC6);
                label.add(CC7);
                Vector cartas = new Vector();
                int contt = 0;
                Carta d1 = new Carta();
                while(contt<cBJ.p.croupier.cartas.size()){
                
                    d1 = (Carta)cBJ.p.croupier.cartas.elementAt(contt);
                    cartas.add(d1);
                    contt++;
                }//END_WHILE
                int conteitor = 0;
                while(conteitor < cartas.size()){

                    Carta d = (Carta)cartas.elementAt(conteitor);
                    
                    switch(d.getValor()){

                    case 1:
                            if(d.getPalo().equals("Picas")){

                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/AP.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);

                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/AD.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/AT.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/AC.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                   case 2:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/2P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/2D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/2T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/2C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                     case 3:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/3P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/3D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/3T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/3C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                      case 4:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/4P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/4D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/4T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/4C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 5:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/5P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/5D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/5T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/5C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 6:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/6P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/6D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/6T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/6C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 7:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/7P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/7D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/7T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/7C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 8:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/8P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/8D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/8T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/8C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                        case 9:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/9P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/9D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/9T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/9C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                        case 10:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/10P.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/10D.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/10T.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/10C.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                        case 11:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/JP.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/JD.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/JT.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/JC.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 12:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/QP.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/QD.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/QT.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/QC.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;

                       case 13:
                            if(d.getPalo().equals("Picas")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/KP.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_IF
                            else if(d.getPalo().equals("Diamantes")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/KD.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else if(d.getPalo().equals("Treboles")){
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/KT.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSEIF
                            else{
                                URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/KC.gif");
                                ImageIcon icon = new ImageIcon(urlDeLaImagen);
                                javax.swing.JLabel l = (javax.swing.JLabel)label.elementAt(conteitor);
                                l.setIcon(icon);
                            }//END_ELSE
                            break;
                    }//END_SWITCH
                    conteitor++;
                }//END_WHILE

            }//END_ELSE

    }//END_METODE

    /* @author Joan
     * Codigo que se encarga de gestionar el stand cuando lo hace el ultimo jugador
     * y por tanto tiene que jugar el croupier
     */
    
    private void accionStand(){

         boolean nohaymas = false;
         int ce = cBJ.p.jugador_actual + 1;
         if(ce == cBJ.p.num_jugadores){
             ce = 1;
         }//END_IF
         int cont = 1;

         while(!cBJ.p.jugadores[ce].indagame){

             if(ce == nJug){
                 nohaymas = true;
                 break;
             }//END_IF
             ce++;
             cont++;

             if(cont == nJug){
                 break;
             }//END_IF
         }//END_WHILE

        if(cBJ.p.jugador_actual == nJug || nohaymas){

            ocultar();
            switch(jugadorActual){

                case 1: T1.setBackground(Color.WHITE);
                        break;

                case 2: T2.setBackground(Color.WHITE);
                        break;

                case 3: T3.setBackground(Color.WHITE);
                        break;

                case 4: T4.setBackground(Color.WHITE);
                        break;

                case 5: T5.setBackground(Color.WHITE);
                        break;

                case 6: T6.setBackground(Color.WHITE);
                        break;

                case 7: T7.setBackground(Color.WHITE);
                        break;
            }//END_SWITCH
             
             cBJ.jugar_croupier();
             int nj = cBJ.p.getNumJugadores()-1;
             int i = 0;

             int val = 0;
             int tam = cBJ.p.croupier.cartas.size();
             while(i<tam){
                 
                 Carta c55 = (Carta)cBJ.p.croupier.cartas.elementAt(i);
                 val = c55.getPuntuacion();
                 val--;
                 cBJ.p.Descarte[val] = cBJ.p.Descarte[val] +1;
                 i++;
                 
             }
             i=1;
             int j = 0;
             int k = 0;
             int val3 = 0;
             while(i<=nj){
                 
                 int tam2 = cBJ.p.jugadores[i].manos.size();
                 
                 while(j<tam2){

                     Mano c2 = (Mano)cBJ.p.jugadores[i].manos.elementAt(j);
                     tam = c2.cartas.size();
                     while(k<tam){
                 
                         Carta cart = (Carta)c2.cartas.elementAt(k);
                         val3 = cart.getPuntuacion();
                         val3--;
                         cBJ.p.Descarte[val3] = cBJ.p.Descarte[val3] +1;
                         k++;
                 
                    }
                     k=0;
                    j++;
                 }
                 j=0;
                 i++;
             }
                   
             pintar_cartes(false);
             pCroup.setText(String.valueOf(cBJ.p.croupier.getPuntuacion()));
             cBJ.finalizar_manos();
             manoActual = 0;
             asegurado = false;

             switch(nJug){

                    case 2: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                            F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                            break;

                    case 3: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                            F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                            F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                            break;

                    case 4: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                            F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                            F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                            F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                            break;

                    case 5: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                            F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                            F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                            F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                            F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                            break;

                    case 6: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                            F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                            F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                            F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                            F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                            F6.setText(String.valueOf(cBJ.p.jugadores[6].chips));
                            break;

                    case 7: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                            F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                            F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                            F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                            F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                            F6.setText(String.valueOf(cBJ.p.jugadores[6].chips));
                            F7.setText(String.valueOf(cBJ.p.jugadores[7].chips));
                            break;

             }//END_SWITCH
             cBJ.p.CalcularSiguienteJugador();
             iniPartida.setEnabled(true);
             cBJ.p.croupier.reset();
             gPartida.setVisible(true);
             SalG.setVisible(true);

         }//END_IF
         
    }//END_METODE

    /* @author Joan
     * Codigo que se ejecuta al apretar el boton stand.
     */

    private void standActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standActionPerformed
        // TODO add your handling code here:

         flush();
         ocultar();
         aviso.setVisible(false);
         boolean nohaymas = false;
         int ce = cBJ.p.jugador_actual + 1;
         if(ce == cBJ.p.num_jugadores){
             ce = 1;
         }//END_IF
         int cont = 1;

         while(!cBJ.p.jugadores[ce].indagame){

             if(ce == nJug){
                 nohaymas = true;
                 break;
             }//END_IF
             ce++;
             cont++;

             if(cont == nJug){
                 break;
             }//END_IF
         }//END_WHILE
         int nManos = cBJ.p.jugadores[jugadorActual].manos.size();

         //Si tiene mas de una mano, antes de pasar de jugador, se tendran que jugar todas
         if(nManos>1){

             if(manoActual+1<nManos){

                 insurance.setVisible(false);
                 manoActual++;
                 ocultar();
                 pintar_cartes(true);
                 actualizar_puntuacion();
                 
                 if(cBJ.p.jugadores[jugadorActual].iebj == null){
                         if(ases){

                             cBJ.hit(manoActual);
                             stand.setVisible(true);
                             pintar_cartes(true);
                             actualizar_puntuacion();

                         }//END_IF
                         else{

                             calculoDeOps(manoActual);
                         }//END_ELSE
          
                 }//END_IF
                 else{

                     jugar_maquina();
                      
                 }//END_ELSE
                
             }//END_IF
             else if(cBJ.p.jugador_actual == nJug || nohaymas){

                 aviso.setVisible(false);
                 accionStand();

             }//END_ELSEIF
             else{

                  pinta();
                  pintar_cartes(true);

                 if(cBJ.p.jugadores[jugadorActual].iebj == null){
                     calculoDeOps(manoActual);
                     aviso.setVisible(false);

                  }//END_IF

                 else{
                        jugar_maquina();
                 }//END_ELSE
                  
             }//END_ELSE
         }//END_IF
         else{
             /*Juega la maquina*/
             if(cBJ.p.jugadores[jugadorActual].iebj != null){
                 
                 jugar_maquina();
                 
             }//END_IF
                              
         if(cBJ.p.jugador_actual == nJug || nohaymas){
                   aviso.setVisible(false);
                   accionStand();
         }//END_IF
                
         else{
             aviso.setVisible(false);
             pinta();
             pintar_cartes(true);
             if(cBJ.p.jugadores[jugadorActual].iebj == null){
                calculoDeOps(manoActual);
             }
             else{
                 stand.setVisible(true);
             }


         }//END_ELSE
      }//END_ELSE

    }//GEN-LAST:event_standActionPerformed

    /* @author Guillem
     * Codigo que se ejecuta al apretar el boton doblar, basicamente
     * se dobla la apuesta, se da una carta mas al jugador, i se termina la mano
     */

    private void doblarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doblarActionPerformed
        // TODO add your handling code here:

        Mano m = (Mano)cBJ.p.jugadores[jugadorActual].manos.elementAt(manoActual);

        if(m.getApuesta()<=cBJ.p.jugadores[jugadorActual].chips){
            
            cBJ.doblar(manoActual);
            ocultar();
            actualizar_puntuacion();
            actualizar_fichas();
            pintar_cartes(true);
            stand.setVisible(true);
        }//END_IF
        else{
            aviso.setText("No te bastan las fichas");
            aviso.setVisible(true);
        }//END_ELSE

    }//GEN-LAST:event_doblarActionPerformed

    /* @author Guillem
     * Codigo que se ejecuta al apretar el boton Insurance
     */

    private void insuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insuranceActionPerformed
        // TODO add your handling code here:

        Mano m = (Mano)cBJ.p.jugadores[jugadorActual].manos.elementAt(manoActual);

        if((m.getApuesta()/2)<=cBJ.p.jugadores[jugadorActual].chips){
            
            cBJ.seguro(manoActual);
            ocultar();
            actualizar_puntuacion();
            actualizar_fichas();
            pintar_cartes(true);
            calculoDeOps(manoActual);
            asegurado = true;
            insurance.setVisible(false);
        
        }//END_IF
        else{
            aviso.setText("No te bastan las fichas");
            aviso.setVisible(true);
        }//END_ELSE

    }//GEN-LAST:event_insuranceActionPerformed

    /* @author Joan
     * Codigo que sirve para limpiar la zona donde aparecen las cartas de los jugadores
     */
    private void flush(){
        
        ImageIcon e = new ImageIcon("");
        CJ1.setIcon(e);
        CJ2.setIcon(e);
        CJ3.setIcon(e);
        CJ4.setIcon(e);
        CJ5.setIcon(e);
        CJ6.setIcon(e);
        CJ7.setIcon(e);
        CJ8.setIcon(e);
        CJ9.setIcon(e);
    }//END_METODE

    /* @author Victor
     * Codigo que se ejecuta al apretar el boton Split. Se separa la mano, i se juega
     * individualmente cada una de ellas normalmente. A no ser que tengas dos ases,
     * en cuyo caso, se te da una carta mas en cada una de las manos, i se termina el turno
     */

    private void splitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitActionPerformed
        // TODO add your handling code here:

        aviso.setVisible(false);

        Mano m = (Mano)cBJ.p.jugadores[jugadorActual].manos.elementAt(manoActual);

        Carta c1 = new Carta();
        Carta c2 = new Carta();
        
        c1 = (Carta)m.cartas.elementAt(0);
        c2 = (Carta)m.cartas.elementAt(1);
        int val1 = c1.getValor();
        int val2 = c2.getValor();
              
        if((m.getApuesta())<=cBJ.p.jugadores[jugadorActual].chips){

            cBJ.split(manoActual);            
            ocultar();
            actualizar_puntuacion();
            actualizar_fichas();
            flush();
            pintar_cartes(true);
                                    
            if(val1 == val2 && val1 == 1){               
                cBJ.hit(manoActual);
                actualizar_puntuacion();
                pintar_cartes(true);
                stand.setVisible(true);
                ases = true;
            }//END_IF
            else{
            
                calculoDeOps(manoActual);
                insurance.setVisible(false);
            }//END_ELSE

        }//END_IF
        else{
            aviso.setText("No te bastan las fichas");
            aviso.setVisible(true);
        }//END_ELSE

    }//GEN-LAST:event_splitActionPerformed

    /* @author Joan
     * Codigo que se ejecuta cuando, al cargar una partida, se han validado los jugadores
     * y se quiere reprender el juego. Basicamente prepara la pantalla de juego
     */

    private void jugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jugarActionPerformed
        // TODO add your handling code here:


            int aMi = cBJ.p.getApostaMinima();
            int aMx = cBJ.p.getApostaMaxima();

            aMinim.setText(String.valueOf(aMi));
            aMa.setText(String.valueOf(aMx));
            nJug = cBJ.p.num_jugadores-1;
            jugadorActual = cBJ.p.getJugadorActual();

            /*Imprimimos solo las cosas necesarias*/
            switch(nJug){

                case 2: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        F3.setVisible(false);
                        F4.setVisible(false);
                        F5.setVisible(false);
                        F6.setVisible(false);
                        F7.setVisible(false);
                        P3.setVisible(false);
                        P4.setVisible(false);
                        P5.setVisible(false);
                        P6.setVisible(false);
                        P7.setVisible(false);
                        N3.setVisible(false);
                        N4.setVisible(false);
                        N5.setVisible(false);
                        N6.setVisible(false);
                        N7.setVisible(false);
                        T3.setVisible(false);
                        T4.setVisible(false);
                        T5.setVisible(false);
                        T6.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF

                        break;

                case 3: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        F4.setVisible(false);
                        F5.setVisible(false);
                        F6.setVisible(false);
                        F7.setVisible(false);
                        P4.setVisible(false);
                        P5.setVisible(false);
                        P6.setVisible(false);
                        P7.setVisible(false);
                        N4.setVisible(false);
                        N5.setVisible(false);
                        N6.setVisible(false);
                        N7.setVisible(false);
                        T4.setVisible(false);
                        T5.setVisible(false);
                        T6.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF

                        break;

                case 4: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        P4.setText(String.valueOf(0));
                        F5.setVisible(false);
                        F6.setVisible(false);
                        F7.setVisible(false);
                        P5.setVisible(false);
                        P6.setVisible(false);
                        P7.setVisible(false);
                        N5.setVisible(false);
                        N6.setVisible(false);
                        N7.setVisible(false);
                        T5.setVisible(false);
                        T6.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[4].usuario != null){

                            N4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                        }//END_IF
                        break;

                case 5: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                        F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        P4.setText(String.valueOf(0));
                        P5.setText(String.valueOf(0));
                        F6.setVisible(false);
                        F7.setVisible(false);
                        P6.setVisible(false);
                        P7.setVisible(false);
                        N6.setVisible(false);
                        N7.setVisible(false);
                        T6.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[4].usuario != null){

                            N4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[5].usuario != null){

                            N5.setText(cBJ.p.jugadores[5].usuario.getLogin());
                        }//END_IF
                        break;

                case 6: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                        F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                        F6.setText(String.valueOf(cBJ.p.jugadores[6].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        P4.setText(String.valueOf(0));
                        P5.setText(String.valueOf(0));
                        P6.setText(String.valueOf(0));
                        F7.setVisible(false);
                        P7.setVisible(false);
                        N7.setVisible(false);
                        T7.setVisible(false);
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[4].usuario != null){

                            N4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[5].usuario != null){

                            N5.setText(cBJ.p.jugadores[5].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[6].usuario != null){

                            N6.setText(cBJ.p.jugadores[6].usuario.getLogin());
                        }//END_IF
                        break;

                case 7: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                        F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                        F6.setText(String.valueOf(cBJ.p.jugadores[6].chips));
                        F7.setText(String.valueOf(cBJ.p.jugadores[7].chips));
                        P1.setText(String.valueOf(0));
                        P2.setText(String.valueOf(0));
                        P3.setText(String.valueOf(0));
                        P4.setText(String.valueOf(0));
                        P5.setText(String.valueOf(0));
                        P6.setText(String.valueOf(0));
                        P7.setText(String.valueOf(0));
                        if(cBJ.p.jugadores[1].usuario != null){

                            N1.setText(cBJ.p.jugadores[1].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[2].usuario != null){

                            N2.setText(cBJ.p.jugadores[2].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[3].usuario != null){

                            N3.setText(cBJ.p.jugadores[3].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[4].usuario != null){

                            N4.setText(cBJ.p.jugadores[4].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[5].usuario != null){

                            N5.setText(cBJ.p.jugadores[5].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[6].usuario != null){

                            N6.setText(cBJ.p.jugadores[6].usuario.getLogin());
                        }//END_IF
                        if(cBJ.p.jugadores[7].usuario != null){

                            N7.setText(cBJ.p.jugadores[7].usuario.getLogin());
                        }//END_IF
                        break;


            }//END_SWITCH

            iniPartida.setEnabled(true);
            apuest.setVisible(false);
            apuesta.setVisible(false);
            apostar.setVisible(false);
            hit.setVisible(false);
            doblar.setVisible(false);
            insurance.setVisible(false);
            stand.setVisible(false);

            split.setVisible(false);
            recuperarJugs.setVisible(false);
            PartidaGui.setVisible(true);
            getRootPane().setContentPane(PartidaGui);


    }//GEN-LAST:event_jugarActionPerformed

    /* @author Joan
     * Codigo que se ejecuta cuando se le da a cancelar en la pantalla login gui 3
     */

    private void cancelar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar3ActionPerformed
        // TODO add your handling code here:

        LoginGUI3.setVisible(false);
        recuperarJugs.setVisible(true);

        getRootPane().setContentPane(recuperarJugs);
        
        user1.setText("");
        pass1.setText("");
        
        switch(jugadorTratado){

            case 1: VJ1.setBackground(c);
                    VJ1.setForeground(Color.BLACK);
                    VJ1.setEnabled(true);
                    break;

            case 2: VJ2.setBackground(c);
                    VJ2.setForeground(Color.BLACK);
                    VJ2.setEnabled(true);
                    break;

            case 3: VJ3.setBackground(c);
                    VJ3.setForeground(Color.BLACK);
                    VJ3.setEnabled(true);
                    break;

            case 4: VJ4.setBackground(c);
                    VJ4.setForeground(Color.BLACK);
                    VJ4.setEnabled(true);
                    break;

            case 5: VJ5.setBackground(c);
                    VJ5.setForeground(Color.BLACK);
                    VJ5.setEnabled(true);
                    break;

            case 6: VJ6.setBackground(c);
                    VJ6.setForeground(Color.BLACK);
                    VJ6.setEnabled(true);
                    break;

            case 7: VJ7.setBackground(c);
                    VJ7.setForeground(Color.BLACK);
                    VJ7.setEnabled(true);
                    break;


        }//END_SWITCH


    }//GEN-LAST:event_cancelar3ActionPerformed

    /* @author Joan
     * Codigo que se ejecuta al darle a aceptar en la pantalla login gui 3, pantalla de login
     * que se utiliza en el caso de cargar una partida, i tener que recuperar sus usuarios humanos
     */

    private void aceptar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptar3ActionPerformed
        // TODO add your handling code here:
        try{
            if (ControladorUsuario.validarLogin(user1.getText(), pass1.getText())) {
                  
                LoginGUI3.setVisible(false);
                recuperarJugs.setVisible(true);
                getRootPane().setContentPane(recuperarJugs);
                user1.setText("");
                pass1.setText("");

                if(VJ1.getBackground() == Color.ORANGE && VJ2.getBackground() == Color.ORANGE && VJ3.getBackground() == Color.ORANGE
                && VJ4.getBackground() == Color.ORANGE && VJ5.getBackground() == Color.ORANGE && VJ6.getBackground() == Color.ORANGE
                && VJ7.getBackground() == Color.ORANGE){

                    jugar.setEnabled(true);
                }//END_IF
            }//END_IF
            else {
                incorrecto1.setVisible(true);
            }//END_ELSE
        }//END_TRY
        catch (UsuariInexistent e){
            incorrecto1.setVisible(true);
        }//END_CATCH

    }//GEN-LAST:event_aceptar3ActionPerformed

    /* @author Joan
     * Codigos que se ejecutan al darle a los botones validar de los distintos jugadores,
     * se ponen en naranja al estar validados
     */


    private void VJ1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VJ1ActionPerformed
        // TODO add your handling code here:

        jugadorTratado = 1;
        user1.setText(cBJ.p.jugadores[1].usuario.getLogin());
        user1.setEnabled(false);            
        recuperarJugs.setVisible(false);
        incorrecto1.setVisible(false);
        LoginGUI3.setVisible(true);
        VJ1.setBackground(Color.ORANGE);
        VJ1.setEnabled(false);
        getRootPane().setContentPane(LoginGUI3);
        
    }//GEN-LAST:event_VJ1ActionPerformed

    private void VJ2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VJ2ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 2;
        user1.setText(cBJ.p.jugadores[2].usuario.getLogin());
        user1.setEnabled(false);
        recuperarJugs.setVisible(false);
        incorrecto1.setVisible(false);
        LoginGUI3.setVisible(true);
        VJ2.setBackground(Color.ORANGE);
        VJ2.setEnabled(false);
        getRootPane().setContentPane(LoginGUI3);
    }//GEN-LAST:event_VJ2ActionPerformed

    private void VJ3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VJ3ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 3;
        user1.setText(cBJ.p.jugadores[3].usuario.getLogin());
        user1.setEnabled(false);
        recuperarJugs.setVisible(false);
        incorrecto1.setVisible(false);
        LoginGUI3.setVisible(true);
        VJ3.setBackground(Color.ORANGE);
        VJ3.setEnabled(false);
        getRootPane().setContentPane(LoginGUI3);
    }//GEN-LAST:event_VJ3ActionPerformed

    private void VJ4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VJ4ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 4;
        user1.setText(cBJ.p.jugadores[4].usuario.getLogin());
        user1.setEnabled(false);
        recuperarJugs.setVisible(false);
        incorrecto1.setVisible(false);
        LoginGUI3.setVisible(true);
        VJ4.setBackground(Color.ORANGE);
        VJ4.setEnabled(false);
        getRootPane().setContentPane(LoginGUI3);
    }//GEN-LAST:event_VJ4ActionPerformed

    private void VJ5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VJ5ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 5;
        user1.setText(cBJ.p.jugadores[5].usuario.getLogin());
        user1.setEnabled(false);
        recuperarJugs.setVisible(false);
        incorrecto1.setVisible(false);
        LoginGUI3.setVisible(true);
        VJ5.setBackground(Color.ORANGE);
        VJ5.setEnabled(false);
        getRootPane().setContentPane(LoginGUI3);
    }//GEN-LAST:event_VJ5ActionPerformed

    private void VJ6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VJ6ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 6;
        user1.setText(cBJ.p.jugadores[6].usuario.getLogin());
        user1.setEnabled(false);
        recuperarJugs.setVisible(false);
        incorrecto1.setVisible(false);
        LoginGUI3.setVisible(true);
        VJ6.setBackground(Color.ORANGE);
        VJ6.setEnabled(false);
        getRootPane().setContentPane(LoginGUI3);
    }//GEN-LAST:event_VJ6ActionPerformed

    private void VJ7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VJ7ActionPerformed
        // TODO add your handling code here:
        jugadorTratado = 7;
        user1.setText(cBJ.p.jugadores[7].usuario.getLogin());
        user1.setEnabled(false);
        recuperarJugs.setVisible(false);
        incorrecto1.setVisible(false);
        LoginGUI3.setVisible(true);
        VJ7.setBackground(Color.ORANGE);
        VJ7.setEnabled(false);
        getRootPane().setContentPane(LoginGUI3);
    }//GEN-LAST:event_VJ7ActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de ayuda
     */
    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed

        AyudaGui.setVisible(false);
        IntroGui.setVisible(true);
        getRootPane().setContentPane(IntroGui);
    }//GEN-LAST:event_volverActionPerformed

    /* @author Guillem
     * Accede a la pantalla de creditos, tras apretar creditos de la pantalla
     * de ayuda
     */
    private void creditosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditosActionPerformed


        // TODO add your handling code here:
        URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/joan1.gif");
        ImageIcon icon = new ImageIcon(urlDeLaImagen);
        URL urlDeLaImagen2 = Croupier.class.getClassLoader().getResource("cartas/guille1.gif");
        ImageIcon icon2 = new ImageIcon(urlDeLaImagen2);
        URL urlDeLaImagen3 = Croupier.class.getClassLoader().getResource("cartas/victor1.gif");
        ImageIcon icon3 = new ImageIcon(urlDeLaImagen3);
        labelJoan.setIcon(icon);
        labelJoan.setVisible(true);
        labelGuille.setIcon(icon2);
        labelGuille.setVisible(true);
        labelGrido.setIcon(icon3);
        labelGrido.setVisible(true);
        AyudaGui.setVisible(false);
        CreditosGui.setVisible(true);
        getRootPane().setContentPane(CreditosGui);
    }//GEN-LAST:event_creditosActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de creditos
     */
    private void volvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volvActionPerformed

        labelJoan.setVisible(false);
        labelGrido.setVisible(false);
        labelGuille.setVisible(false);
        CreditosGui.setVisible(false);
        AyudaGui.setVisible(true);
        getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_volvActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar Nueva Partida de la pantalla de ayuda,
     * nos ense√±a la ayuda de este apartado
     */
    private void nuevaPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaPartidaActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/capII.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap2.setIcon(icon);
       cap2.setVisible(true);

       AyudaGui.setVisible(false);
       AyudaNuevaPartida.setVisible(true);
       getRootPane().setContentPane(AyudaNuevaPartida);
    }//GEN-LAST:event_nuevaPartidaActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar Usuario de la pantalla de ayuda,
     * nos ense√±a la ayuda de este apartado
     */
    private void usuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuarioActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap12.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap12.setIcon(icon);
       cap12.setVisible(true);

       AyudaGui.setVisible(false);
       AyudaUsuario.setVisible(true);
       getRootPane().setContentPane(AyudaUsuario);
    }//GEN-LAST:event_usuarioActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar Ranking de la pantalla de ayuda,
     * nos ense√±a la ayuda de este apartado
     */
    private void rankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap11.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap11.setIcon(icon);
       cap11.setVisible(true);

       AyudaGui.setVisible(false);
       AyudaRanking.setVisible(true);
       getRootPane().setContentPane(AyudaRanking);
    }//GEN-LAST:event_rankingActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar Cargar Partida de la pantalla de ayuda,
     * nos ense√±a la ayuda de este apartado
     */
    private void cargarPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarPartidaActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap13.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap13.setIcon(icon);
       cap13.setVisible(true);


       AyudaGui.setVisible(false);
       AyudaCargarPartida.setVisible(true);
       getRootPane().setContentPane(AyudaCargarPartida);
    }//GEN-LAST:event_cargarPartidaActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar Pantalla principal de la pantalla de ayuda,
     * nos ense√±a la ayuda de este apartado
     */
    private void pantallaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pantallaPrincipalActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/capX.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap1.setIcon(icon);
       cap1.setVisible(true);
       
       AyudaGui.setVisible(false);
       AyudaPantallaPrincipal.setVisible(true);
       getRootPane().setContentPane(AyudaPantallaPrincipal);

       
    }//GEN-LAST:event_pantallaPrincipalActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar Registrar de la pantalla de ayuda,
     * nos ense√±a la ayuda de este apartado
     */
    private void registrarayudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarayudaActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap14.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap14.setIcon(icon);
       cap14.setVisible(true);

       AyudaGui.setVisible(false);
       AyudaRegistrar.setVisible(true);
       getRootPane().setContentPane(AyudaRegistrar);
    }//GEN-LAST:event_registrarayudaActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de la nueva partida
     */
    private void VolverAyudaNuevaPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaNuevaPartidaActionPerformed

        AyudaNuevaPartida.setVisible(false);
        AyudaGui.setVisible(true);
        getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaNuevaPartidaActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de usuario
     */
    private void VolverAyudaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaUsuarioActionPerformed

        AyudaUsuario.setVisible(false);
        AyudaGui.setVisible(true);
        getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaUsuarioActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda del Ranking
     */
    private void VolverAyudaRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaRankingActionPerformed
        
        AyudaRanking.setVisible(false);
        AyudaGui.setVisible(true);
        getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaRankingActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de cargar partida
     */
    private void VolverAyudaCargarPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaCargarPartidaActionPerformed
        
        AyudaCargarPartida.setVisible(false);
        AyudaGui.setVisible(true);
        getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaCargarPartidaActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de registrar
     */
    private void VolverAyudaRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaRegistrarActionPerformed
        
        AyudaRegistrar.setVisible(false);
        AyudaGui.setVisible(true);
        getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaRegistrarActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de pantalla principal
     */
    private void VolverAyudaPantallaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaPantallaPrincipalActionPerformed

        
        AyudaPantallaPrincipal.setVisible(false);
        AyudaGui.setVisible(true);
        getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaPantallaPrincipalActionPerformed

    /* @author Guillem
     * Codigo que nos muestra la siguiente ayuda del apartado Nueva Partida
     */
    private void SiguienteAyudaNuevaPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteAyudaNuevaPartidaActionPerformed

        URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap3.gif");
        ImageIcon icon = new ImageIcon(urlDeLaImagen);
        cap3.setIcon(icon);
        cap3.setVisible(true);

        AyudaNuevaPartida.setVisible(false);
        AyudaConfJug.setVisible(true);
        getRootPane().setContentPane(AyudaConfJug);
    }//GEN-LAST:event_SiguienteAyudaNuevaPartidaActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de pantalla principal
     */
    private void VolverAyudaPantallaPrincipal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaPantallaPrincipal1ActionPerformed

       AyudaNuevaPartida.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaPantallaPrincipal1ActionPerformed

    /* @author Guillem
     * Codigo que nos muestra la siguiente ayuda del apartado Nueva Partida
     */
    private void SiguienteAyudaConfJugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteAyudaConfJugActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/capIV.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap4.setIcon(icon);
       cap4.setVisible(true);

       AyudaConfJug.setVisible(false);
       AyudaConfPart.setVisible(true);
       getRootPane().setContentPane(AyudaConfPart);
    }//GEN-LAST:event_SiguienteAyudaConfJugActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de pantalla principal
     */
    private void VolverAyudaPantallaPrincipal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaPantallaPrincipal2ActionPerformed

       AyudaConfPart.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaPantallaPrincipal2ActionPerformed
    
    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de usuario
     */
    private void VolverAyudaUsuario2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaUsuario2ActionPerformed

       AyudaUsuario.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaUsuario2ActionPerformed

    /* @author Guillem
     * Codigo que nos muestra la siguiente ayuda del apartado usuario
     */
    private void SiguienteAyudaUsuario2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteAyudaUsuario2ActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap16.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap16.setIcon(icon);
       cap16.setVisible(true);

       AyudaUsuario2.setVisible(false);
       AyudaUsuario3.setVisible(true);
       getRootPane().setContentPane(AyudaUsuario3);
    }//GEN-LAST:event_SiguienteAyudaUsuario2ActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de usuario
     */
    private void VolverAyudaUsuario3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaUsuario3ActionPerformed

       AyudaUsuario3.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaUsuario3ActionPerformed

    /* @author Guillem
     * Codigo que nos muestra la siguiente ayuda del apartado usuario
     */
    private void SiguienteAyudaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteAyudaUsuarioActionPerformed
       
        URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap15.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap15.setIcon(icon);
       cap15.setVisible(true);

       AyudaUsuario.setVisible(false);
       AyudaUsuario2.setVisible(true);
       getRootPane().setContentPane(AyudaUsuario2);
    }//GEN-LAST:event_SiguienteAyudaUsuarioActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de cargar partida
     */
    private void VolverAyudaCargarPartida1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaCargarPartida1ActionPerformed

       AyudaCargarPartida1.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaCargarPartida1ActionPerformed

    /* @author Guillem
     * Codigo que nos muestra la siguiente ayuda del apartado usuario
     */
    private void SiguienteAyudaUsuario3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteAyudaUsuario3ActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap17.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap17.setIcon(icon);
       cap17.setVisible(true);

       AyudaCargarPartida.setVisible(false);
       AyudaCargarPartida1.setVisible(true);
       getRootPane().setContentPane(AyudaCargarPartida1);
    }//GEN-LAST:event_SiguienteAyudaUsuario3ActionPerformed

    /* @author Guillem
     * Codigo que nos muestra las reglas del blackjack en el apartado ayuda
     */
    private void AyudaReglesBJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AyudaReglesBJActionPerformed


       AyudaGui.setVisible(false);
       AyudaReglesBlackJack.setVisible(true);
       getRootPane().setContentPane(AyudaReglesBlackJack);

    }//GEN-LAST:event_AyudaReglesBJActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de registrar
     */
    private void VolverAyudaRegistrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaRegistrar1ActionPerformed

       AyudaReglesBlackJack.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaRegistrar1ActionPerformed

    /* @author Guillem
     * Codigo que nos muestra la ayuda de la partida
     */
    private void AyudaPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AyudaPActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap5.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap5.setIcon(icon);
       cap5.setVisible(true);

       AyudaGui.setVisible(false);
       AyudaPartida.setVisible(true);
       getRootPane().setContentPane(AyudaPartida);
    }//GEN-LAST:event_AyudaPActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de registrar
     */
    private void VolverAyudaRegistrar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaRegistrar2ActionPerformed

       AyudaPartida.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaRegistrar2ActionPerformed

    /* @author Guillem
     * Codigo que nos muestra la siguiente ayuda del apartado Nueva Partida
     */
    private void SiguienteAyudaPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteAyudaPartidaActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap6.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap6.setIcon(icon);
       cap6.setVisible(true);

       AyudaPartida.setVisible(false);
       AyudaPartida1.setVisible(true);
       getRootPane().setContentPane(AyudaPartida1);
    }//GEN-LAST:event_SiguienteAyudaPartidaActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de registrar
     */
    private void VolverAyudaRegistrar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaRegistrar3ActionPerformed

       AyudaPartida1.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaRegistrar3ActionPerformed

    /* @author Guillem
     * Codigo que nos muestra la siguiente ayuda del apartado Nueva Partida
     */
    private void SiguienteAyudaPartida1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteAyudaPartida1ActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap7.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap7.setIcon(icon);
       cap7.setVisible(true);

       AyudaPartida1.setVisible(false);
       AyudaPartida2.setVisible(true);
       getRootPane().setContentPane(AyudaPartida2);
    }//GEN-LAST:event_SiguienteAyudaPartida1ActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de registrar
     */
    private void VolverAyudaRegistrar4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaRegistrar4ActionPerformed

       AyudaPartida2.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaRegistrar4ActionPerformed

    /* @author Guillem
     * Codigo que nos muestra la siguiente ayuda del apartado Nueva Partida
     */
    private void SiguienteAyudaPartida2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteAyudaPartida2ActionPerformed

       URL urlDeLaImagen = Croupier.class.getClassLoader().getResource("cartas/cap8.gif");
       ImageIcon icon = new ImageIcon(urlDeLaImagen);
       cap8.setIcon(icon);
       cap8.setVisible(true);

       AyudaPartida2.setVisible(false);
       AyudaPartida3.setVisible(true);
       getRootPane().setContentPane(AyudaPartida3);
    }//GEN-LAST:event_SiguienteAyudaPartida2ActionPerformed

    /* @author Guillem
     * Codigo que se genera al apretar volver de la pantalla de la ayuda de registrar
     */
    private void VolverAyudaRegistrar5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverAyudaRegistrar5ActionPerformed

       AyudaPartida3.setVisible(false);
       AyudaGui.setVisible(true);
       getRootPane().setContentPane(AyudaGui);
    }//GEN-LAST:event_VolverAyudaRegistrar5ActionPerformed


    /* @author Joan
     * Codigo que se usa para actualizar las fichas del jugador actual
     */

    private void actualizar_fichas(){

        switch(jugadorActual){

                case 1: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                        break;

                case 2: F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                        break;

                case 3: F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                        break;

                case 4: F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                        break;

                case 5: F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                        break;

                case 6: F6.setText(String.valueOf(cBJ.p.jugadores[6].chips));
                        break;

                case 7: F7.setText(String.valueOf(cBJ.p.jugadores[7].chips));
                        break;
        }//END_SWITCH

    }//END_METODE

    /* @author Victor
     * Codigo que usamos para calcular las opciones disponibles que tiene el jugador actual
     * dependiendo de su mano actual. Usamos esta accion para imprimir por pantalla los botones
     * que puede usar
     */

    private void calculoDeOps(int mano){

         int variable2=0;
         variable2 = cBJ.calcular_opciones(mano);

            if(variable2 > 15){

                 hit.setVisible(true);
                 variable2 = variable2 -16;
            }//END_IF

            if(variable2 > 7){

                stand.setVisible(true);
                variable2 = variable2 - 8;

            }//END_IF

            if(variable2 > 3){

                if(cBJ.p.jugadores[jugadorActual].manos.size() < 4){
                    split.setVisible(true);
                }//END_IF
                variable2 = variable2 - 4;
            }//END_IF
            if(variable2 >1){

                doblar.setVisible(true);
                variable2 = variable2 - 2;
            }//END_IF
            Mano m = new Mano(0);
            m = (Mano)cBJ.p.jugadores[jugadorActual].manos.elementAt(0);

            if((variable2 > 0) && (cBJ.p.jugadores[jugadorActual].manos.size() ==1) && (m.cartas.size() ==2) ){

                insurance.setVisible(true);

            }//END_IF
            if(variable2 == 0){

                stand.setVisible(true);
            }//END_IF

    }//END_METODE


    /* @author Guillem
     * Codigo que usamos para despintar el cuadro de turno de los jugadores, avanzar de jugador
     * actual y pintar el cuadro del turno del nuevo jugador actual
     */

    private void pinta(){

        jugadorActual = cBJ.p.getJugadorActual();

        switch(jugadorActual){

            case 1: F1.setText(String.valueOf(cBJ.p.jugadores[1].chips));
                    T1.setBackground(Color.WHITE);
                    break;

            case 2: F2.setText(String.valueOf(cBJ.p.jugadores[2].chips));
                    T2.setBackground(Color.WHITE);
                    break;

            case 3: F3.setText(String.valueOf(cBJ.p.jugadores[3].chips));
                    T3.setBackground(Color.WHITE);
                    break;

            case 4: F4.setText(String.valueOf(cBJ.p.jugadores[4].chips));
                    T4.setBackground(Color.WHITE);
                    break;

            case 5: F5.setText(String.valueOf(cBJ.p.jugadores[5].chips));
                    T5.setBackground(Color.WHITE);
                    break;

            case 6: F6.setText(String.valueOf(cBJ.p.jugadores[6].chips));
                    T6.setBackground(Color.WHITE);
                    break;

            case 7: F7.setText(String.valueOf(cBJ.p.jugadores[7].chips));
                    T7.setBackground(Color.WHITE);
                    break;
        }//END_SWITCH

        cBJ.p.CalcularSiguienteJugador();
        jugadorActual = cBJ.p.getJugadorActual();
        manoActual = 0;
        asegurado = false;
        ases = false;

        switch(jugadorActual){

            case 1: T1.setBackground(Color.BLACK);
                    break;

            case 2: T2.setBackground(Color.BLACK);
                    Mano m2 = (Mano)cBJ.p.jugadores[2].manos.elementAt(0);
                    P2.setText(String.valueOf(m2.getPuntuacion()));
                    break;

            case 3: T3.setBackground(Color.BLACK);
                    Mano m3 = (Mano)cBJ.p.jugadores[3].manos.elementAt(0);
                    P3.setText(String.valueOf(m3.getPuntuacion()));
                    break;

            case 4: T4.setBackground(Color.BLACK);
                    Mano m4 = (Mano)cBJ.p.jugadores[4].manos.elementAt(0);
                    P4.setText(String.valueOf(m4.getPuntuacion()));
                    break;

            case 5: T5.setBackground(Color.BLACK);
                    Mano m5 = (Mano)cBJ.p.jugadores[5].manos.elementAt(0);
                    P5.setText(String.valueOf(m5.getPuntuacion()));
                    break;

            case 6: T6.setBackground(Color.BLACK);
                    Mano m6 = (Mano)cBJ.p.jugadores[6].manos.elementAt(0);
                    P6.setText(String.valueOf(m6.getPuntuacion()));
                    break;

            case 7: T7.setBackground(Color.BLACK);
                    Mano m7 = (Mano)cBJ.p.jugadores[7].manos.elementAt(0);
                    P7.setText(String.valueOf(m7.getPuntuacion()));
                    break;
        }//END_SWITCH

        ocultar();

    }//END_METODE

    /* @author Joan
     * Codigo para ocultar todos los botones de juego
     */

    private void ocultar(){

        hit.setVisible(false);
        doblar.setVisible(false);
        split.setVisible(false);
        insurance.setVisible(false);
        stand.setVisible(false);
        
    }//END_METODE

    /**
    *   MAIN
    */
     public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new guiE().setVisible(true);
                nextpane = IntroGui;
            }
        });
    }//END_METODE

    @Override
    /* @author Joan
     * Codigo que se ejecuta tras haber elegido numero de jugadores, i sus tipos
     * al apretar el boton aceptar de esa pantalla. Principalmente se inicializa la partida
     * y se cogen los valores elegidos
     */

    protected void aceptarJugadoresActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

      Users.removeAllElements();
      boolean b = true;
      nJug = NJug.getSelectedIndex() + 2;
      cBJ.InicializarPartida(nJug +1, 6, false);
      if (jug11.isVisible()){
          tipo1 = (String)jug11.getSelectedItem();
      }//END_IF
      else{
          tipo1 = "";
      }//END_ELSE
      if (jug21.isVisible()){
          tipo2 = (String)jug21.getSelectedItem();
      }//END_IF
      else{
          tipo2 = "";
      }//END_ELSE
      if (jug31.isVisible()){
          tipo3 = (String)jug31.getSelectedItem();
      }//END_IF
      else{
          tipo3 = "";
      }//END_ELSE
      if (jug41.isVisible()){
          tipo4 = (String)jug41.getSelectedItem();
      }//END_IF
      else{
          tipo4 = "";
      }//END_ELSE
      if (jug51.isVisible()){
          tipo5 = (String)jug51.getSelectedItem();
      }//END_IF
      else{
          tipo5 = "";
      }//END_ELSE
      if (jug61.isVisible()){
          tipo6 = (String)jug61.getSelectedItem();
      }//END_IF
      else{
          tipo6 = "";
      }//END_ELSE
      if (jug71.isVisible()){
          tipo7 = (String)jug71.getSelectedItem();
      }//END_IF
      else{
          tipo7 = "";
      }//END_ELSE

      SelJugGui.setVisible(false);
      ConfigJugadoresGui.setVisible(true);
      njug.setText(String.valueOf(nJug));

      /*Configuramos la pantalla siguiente, y inicializamos las maquinas con sus ficheros
       de estrategia correspondientes.*/

      if(!tipo1.equals("Humano")){

          cJ1.setVisible(false);
          cJ1.setBackground(Color.green);

          if(tipo1.equals("M√°quina")){
              
              String ipo1 = (String)jug12.getSelectedItem();
              String estr = cBJ.cargaEstrategia(ipo1);

              try{
                  ieb = new IEBJ(estr);
                  ieb.setEstrategia(ipo1);
              }//END_TRY

              catch(Exception e){

                  e.printStackTrace();
              }//END_CATCH
              cBJ.p.jugadores[1].iebj = ieb;

          }//END_IF
      }//END_IF
      else{
          b = false;
      }//END_ELSE
      if(!tipo2.equals("Humano")){

          cJ2.setVisible(false);
          cJ2.setBackground(Color.green);


          if(tipo2.equals("M√°quina")){

              String ipo1 = (String)jug22.getSelectedItem();
              String estr = cBJ.cargaEstrategia(ipo1);

              try{
                  ieb = new IEBJ(estr);
                  ieb.setEstrategia(ipo1);
              }//END_TRY

              catch(Exception e){

                  e.printStackTrace();
              }//END_CATCH
              cBJ.p.jugadores[2].iebj = ieb;

          }//END_IF

      }//END_IF
      else{
          b = false;
      }//END_ELSE
      if(!tipo3.equals("Humano")){

           cJ3.setVisible(false);
           cJ3.setBackground(Color.green);
           if(tipo3.equals("M√°quina")){

              String ipo1 = (String)jug32.getSelectedItem();
              String estr = cBJ.cargaEstrategia(ipo1);

              try{
                  ieb = new IEBJ(estr);
                  ieb.setEstrategia(ipo1);
              }//END_TRY

              catch(Exception e){

                  e.printStackTrace();
              }//END_CATCH
              cBJ.p.jugadores[3].iebj = ieb;

          }//END_IF
      }//END_IF
      else{
          b = false;
      }//END_ELSE
      if(tipo3.equals("")){
          juga3.setVisible(false);
      }//END_IF
      if(!tipo4.equals("Humano")){

          cJ4.setVisible(false);
          cJ4.setBackground(Color.green);

           if(tipo4.equals("M√°quina")){

              String ipo1 = (String)jug42.getSelectedItem();
              String estr = cBJ.cargaEstrategia(ipo1);

              try{
                  ieb = new IEBJ(estr);
                  ieb.setEstrategia(ipo1);
              }//END_TRY

              catch(Exception e){

                  e.printStackTrace();
              }//END_CATCH
              cBJ.p.jugadores[4].iebj = ieb;

          }//END_IF

      }//END_IF
      else{
          b = false;
      }//END_ELSE
      if(tipo4.equals("")){
          juga4.setVisible(false);
      }//END_IF
      if(!tipo5.equals("Humano")){

          cJ5.setVisible(false);
          cJ5.setBackground(Color.green);

           if(tipo5.equals("M√°quina")){

              String ipo1 = (String)jug52.getSelectedItem();
              String estr = cBJ.cargaEstrategia(ipo1);

              try{
                  ieb = new IEBJ(estr);
                  ieb.setEstrategia(ipo1);
              }//END_TRY

              catch(Exception e){

                  e.printStackTrace();
              }//END_CATCH
              cBJ.p.jugadores[5].iebj = ieb;

          }//END_IF

      }//END_IF
      else{
          b = false;
      }//END_ELSE
      if(tipo5.equals("")){
          juga5.setVisible(false);
      }//END_IF
      if(!tipo6.equals("Humano")){

          cJ6.setVisible(false);
          cJ6.setBackground(Color.green);

           if(tipo6.equals("M√°quina")){

              String ipo1 = (String)jug62.getSelectedItem();
              String estr = cBJ.cargaEstrategia(ipo1);
              
              try{
                  ieb = new IEBJ(estr);
                  ieb.setEstrategia(ipo1);
              }//END_TRY

              catch(Exception e){

                  e.printStackTrace();
              }//END_CATCH
              cBJ.p.jugadores[6].iebj = ieb;

          }//END_IF
      }//END_IF
      else{
          b = false;
      }
      if(tipo6.equals("")){
          juga6.setVisible(false);
      }
      if(!tipo7.equals("Humano")){

          cJ7.setVisible(false);
          cJ7.setBackground(Color.green);

           if(tipo7.equals("M√°quina")){

              String ipo1 = (String)jug72.getSelectedItem();
              String estr = cBJ.cargaEstrategia(ipo1);
             
              try{
                  ieb = new IEBJ(estr);
                  ieb.setEstrategia(ipo1);
              }//END_TRY

              catch(Exception e){

                  e.printStackTrace();
              }//END_CATCH
              cBJ.p.jugadores[7].iebj = ieb;

          }//END_IF
      }//END_IF
      else{
          b = false;
      }//END_ELSE
      if(tipo7.equals("")){
          juga7.setVisible(false);
      }//END_IF
      
      aceptarJugs.setEnabled(b);

      getRootPane().setContentPane(ConfigJugadoresGui);

    }//END_METODE
  
    @Override
    /* @author Guillem
     * Codigo que se ejecuta tras apretar el boton ayuda del menu principal
     */
      protected void AyudaActionPerformed(java.awt.event.ActionEvent evt) {
           // TODO add your handling code here:

            IntroGui.setVisible(false);
            AyudaGui.setVisible(true);
            getRootPane().setContentPane(AyudaGui);

        }//END_METODE

      @Override
      
      /* @author Guillem
       * Codigo que se ejecuta al apretar desde el menu principal, usuario, despues de haberte
       * logueado, y hayas apretado aceptar en la pantalla posterior. Principalmente te cambia
       * la contrase√±a si lo deseas y al apretar aceptar, ense√±a la pantalla de estadisticas y
       * achievements. En el caso de que tengas un achievement, te saldra en verde, de lo contrario
       * saldra en rojo*/
      
      protected void UsuarioaceptarActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        try {
            ControladorUsuario.modificarPass(Usuarionombre.getText(), Usuariocontrase√±a.getText(), Usuariocontrase√±anueva.getText());
        }//END_TRY

        catch(UsuariInexistent e){
            e.printStackTrace();
        }//END_CATCH

        catch(CaracteresInvalidos e){
            e.printStackTrace();
        }//END_CATCH

        UsuarioGui.setVisible(false);
        EstadisticasGui.setVisible(true);
        getRootPane().setContentPane(EstadisticasGui);
        Usuariocontrase√±anueva.setText("");
        Humano u1 = new Humano();
        try{
            u1 = cBJ.carregar_usuari(Usuarionombre.getText(), Usuariocontrase√±a.getText());
        }//END_TRY

        catch(Exception e){
            e.printStackTrace();
        }//END_CATCH

        int pGan = u1.getEst().getPartidasGanadas();
        int pPer = u1.getEst().getPartidasPerdidas();
        int pMed = u1.getEst().getPuntuacionMedia();
        int pJug = u1.getEst().getPartidasJugadas();
        int nBJ = u1.getEst().getEstC().getNumBJs();
        int nEm = u1.getEst().getEstC().getNumEmpats();
        int nS = u1.getEst().getEstC().getNumSplits();
        int nDob = u1.getEst().getEstC().getNumApostesDoblades();
        int mNumF = u1.getEst().getEstC().getMaxNumFitxes();
        int nSEmp = u1.getEst().getEstC().getNumSegurosEmprats();
        boolean pBJ = u1.getEst().getEstC().getAchievements().getPrimerBJ();
        boolean pMG = u1.getEst().getEstC().getAchievements().getPrimeraMaGuanyada();
        boolean eBJ = u1.getEst().getEstC().getAchievements().getEmpatBJ();
        boolean qMG = u1.getEst().getEstC().getAchievements().getQuinzeMansGuanyades();
        boolean qBJ = u1.getEst().getEstC().getAchievements().getQuinzeBJs();
        boolean gMC = u1.getEst().getEstC().getAchievements().getGuanyarMenysCatorze();
        boolean pV = u1.getEst().getEstC().getAchievements().getPerdreAmbVint();
        boolean dS = u1.getEst().getEstC().getAchievements().getDobleSplit();
        boolean aI = u1.getEst().getEstC().getAchievements().getAllIn();
        boolean tA = u1.getEst().getEstC().getAchievements().getTotsAchievements();
        username.setText("Nombre de Usuario: " + Usuarionombre.getText());
        PG.setText(String.valueOf(pGan));
        PP.setText(String.valueOf(pPer));
        PM.setText(String.valueOf(pMed));
        PJ.setText(String.valueOf(pJug));
        NB.setText(String.valueOf(nBJ));
        NE.setText(String.valueOf(nEm));
        NS.setText(String.valueOf(nS));
        AD.setText(String.valueOf(nDob));
        MF.setText(String.valueOf(mNumF));
        SU.setText(String.valueOf(nSEmp));

        if(pBJ){
            PB.setBackground(Color.green);
        }//END_IF
        else{
            PB.setBackground(Color.red);
        }//END_ELSE
        if(pMG){
            PMG.setBackground(Color.green);
        }//END_IF
        else{
            PMG.setBackground(Color.red);
        }//END_ELSE
        if(eBJ){
            EB.setBackground(Color.green);
        }//END_IF
        else{
            EB.setBackground(Color.red);
        }//END_ELSE
        if(qMG){
            QM.setBackground(Color.green);
        }//END_IF
        else{
            QM.setBackground(Color.red);
        }//END_ELSE
        if(qBJ){
            QB.setBackground(Color.green);
        }//END_IF
        else{
            QB.setBackground(Color.red);
        }//END_ELSE
        if(gMC){
            GC.setBackground(Color.green);
        }//END_IF
        else{
            GC.setBackground(Color.red);
        }//END_ELSE
        if(pV){
            PV.setBackground(Color.green);
        }//END_IF
        else{
            PV.setBackground(Color.red);
        }//END_ELSE
        if(dS){
            DS.setBackground(Color.green);
        }//END_IF
        else{
            DS.setBackground(Color.red);
        }//END_ELSE
        if(aI){
            AI.setBackground(Color.green);
        }//END_IF
        else{
            AI.setBackground(Color.red);
        }//END_ELSE
        if(tA){
            TA.setBackground(Color.green);
        }//END_IF
        else{
            TA.setBackground(Color.red);
        }//END_ELSE

    }//END_METODE


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AD;
    private javax.swing.JTextField AI;
    private javax.swing.JPanel AyudaCargarPartida;
    private javax.swing.JPanel AyudaCargarPartida1;
    private javax.swing.JPanel AyudaConfJug;
    private javax.swing.JPanel AyudaConfPart;
    private javax.swing.JPanel AyudaGui;
    private javax.swing.JPanel AyudaNuevaPartida;
    private javax.swing.JButton AyudaP;
    private javax.swing.JPanel AyudaPantallaPrincipal;
    private javax.swing.JPanel AyudaPartida;
    private javax.swing.JPanel AyudaPartida1;
    private javax.swing.JPanel AyudaPartida2;
    private javax.swing.JPanel AyudaPartida3;
    private javax.swing.JPanel AyudaRanking;
    private javax.swing.JPanel AyudaRegistrar;
    private javax.swing.JButton AyudaReglesBJ;
    private javax.swing.JPanel AyudaReglesBlackJack;
    private javax.swing.JPanel AyudaUsuario;
    private javax.swing.JPanel AyudaUsuario2;
    private javax.swing.JPanel AyudaUsuario3;
    private javax.swing.JLabel CC1;
    private javax.swing.JLabel CC2;
    private javax.swing.JLabel CC3;
    private javax.swing.JLabel CC4;
    private javax.swing.JLabel CC5;
    private javax.swing.JLabel CC6;
    private javax.swing.JLabel CC7;
    private javax.swing.JLabel CJ1;
    private javax.swing.JLabel CJ2;
    private javax.swing.JLabel CJ3;
    private javax.swing.JLabel CJ4;
    private javax.swing.JLabel CJ5;
    private javax.swing.JLabel CJ6;
    private javax.swing.JLabel CJ7;
    private javax.swing.JLabel CJ8;
    private javax.swing.JLabel CJ9;
    private javax.swing.JPanel ConfigJugadoresGui;
    private javax.swing.JPanel ConfigPartidaGui;
    private javax.swing.JPanel CreditosGui;
    private javax.swing.JTextField DS;
    private javax.swing.JTextField EB;
    private javax.swing.JPanel EstadisticasGui;
    private javax.swing.JTextField F1;
    private javax.swing.JTextField F2;
    private javax.swing.JTextField F3;
    private javax.swing.JTextField F4;
    private javax.swing.JTextField F5;
    private javax.swing.JTextField F6;
    private javax.swing.JTextField F7;
    private javax.swing.JTextField GC;
    private javax.swing.JPanel GuardarGui;
    private javax.swing.JLabel LJ1;
    private javax.swing.JLabel LJ2;
    private javax.swing.JLabel LJ3;
    private javax.swing.JLabel LJ4;
    private javax.swing.JLabel LJ5;
    private javax.swing.JLabel LJ6;
    private javax.swing.JLabel LJ7;
    private javax.swing.JPanel LoginGUI3;
    private javax.swing.JPanel LoginGui2;
    private javax.swing.JTextField MF;
    private javax.swing.JLabel N1;
    private javax.swing.JLabel N2;
    private javax.swing.JLabel N3;
    private javax.swing.JLabel N4;
    private javax.swing.JLabel N5;
    private javax.swing.JLabel N6;
    private javax.swing.JLabel N7;
    private javax.swing.JTextField NB;
    private javax.swing.JTextField NE;
    private javax.swing.JTextField NS;
    private javax.swing.JTextField P1;
    private javax.swing.JTextField P2;
    private javax.swing.JTextField P3;
    private javax.swing.JTextField P4;
    private javax.swing.JTextField P5;
    private javax.swing.JTextField P6;
    private javax.swing.JTextField P7;
    private javax.swing.JTextField PB;
    private javax.swing.JTextField PG;
    private javax.swing.JTextField PJ;
    private javax.swing.JTextField PM;
    private javax.swing.JTextField PMG;
    private javax.swing.JTextField PP;
    private javax.swing.JTextField PV;
    private javax.swing.JPanel PartidaGui;
    private javax.swing.JTextField QB;
    private javax.swing.JTextField QM;
    private javax.swing.JTextField SU;
    private javax.swing.JButton SalG;
    private javax.swing.JButton SiguienteAyudaConfJug;
    private javax.swing.JButton SiguienteAyudaNuevaPartida;
    private javax.swing.JButton SiguienteAyudaPartida;
    private javax.swing.JButton SiguienteAyudaPartida1;
    private javax.swing.JButton SiguienteAyudaPartida2;
    private javax.swing.JButton SiguienteAyudaUsuario;
    private javax.swing.JButton SiguienteAyudaUsuario2;
    private javax.swing.JButton SiguienteAyudaUsuario3;
    private javax.swing.JTextField T1;
    private javax.swing.JTextField T2;
    private javax.swing.JTextField T3;
    private javax.swing.JTextField T4;
    private javax.swing.JTextField T5;
    private javax.swing.JTextField T6;
    private javax.swing.JTextField T7;
    private javax.swing.JTextField TA;
    private javax.swing.JButton VJ1;
    private javax.swing.JButton VJ2;
    private javax.swing.JButton VJ3;
    private javax.swing.JButton VJ4;
    private javax.swing.JButton VJ5;
    private javax.swing.JButton VJ6;
    private javax.swing.JButton VJ7;
    private javax.swing.JButton VolverAyudaCargarPartida;
    private javax.swing.JButton VolverAyudaCargarPartida1;
    private javax.swing.JButton VolverAyudaNuevaPartida;
    private javax.swing.JButton VolverAyudaPantallaPrincipal;
    private javax.swing.JButton VolverAyudaPantallaPrincipal1;
    private javax.swing.JButton VolverAyudaPantallaPrincipal2;
    private javax.swing.JButton VolverAyudaRanking;
    private javax.swing.JButton VolverAyudaRegistrar;
    private javax.swing.JButton VolverAyudaRegistrar1;
    private javax.swing.JButton VolverAyudaRegistrar2;
    private javax.swing.JButton VolverAyudaRegistrar3;
    private javax.swing.JButton VolverAyudaRegistrar4;
    private javax.swing.JButton VolverAyudaRegistrar5;
    private javax.swing.JButton VolverAyudaUsuario;
    private javax.swing.JButton VolverAyudaUsuario2;
    private javax.swing.JButton VolverAyudaUsuario3;
    private javax.swing.JTextField aMa;
    private javax.swing.JTextField aMax;
    private javax.swing.JTextField aMin;
    private javax.swing.JTextField aMinim;
    private javax.swing.JButton abandPartida;
    private javax.swing.JButton aceptar2;
    private javax.swing.JButton aceptar3;
    private javax.swing.JButton aceptarJugs;
    private javax.swing.JLabel adoblades;
    private javax.swing.JLabel ain;
    private javax.swing.JLabel apmax;
    private javax.swing.JLabel apmin;
    private javax.swing.JButton apostar;
    private javax.swing.JLabel apuest;
    private javax.swing.JTextField apuesta;
    private javax.swing.JLabel avi;
    private javax.swing.JLabel aviso;
    private javax.swing.JButton cJ1;
    private javax.swing.JButton cJ2;
    private javax.swing.JButton cJ3;
    private javax.swing.JButton cJ4;
    private javax.swing.JButton cJ5;
    private javax.swing.JButton cJ6;
    private javax.swing.JButton cJ7;
    private javax.swing.JButton cancSalir;
    private javax.swing.JButton cancelG;
    private javax.swing.JButton cancelar2;
    private javax.swing.JButton cancelar3;
    private javax.swing.JLabel cap1;
    private javax.swing.JLabel cap11;
    private javax.swing.JLabel cap12;
    private javax.swing.JLabel cap13;
    private javax.swing.JLabel cap14;
    private javax.swing.JLabel cap15;
    private javax.swing.JLabel cap16;
    private javax.swing.JLabel cap17;
    private javax.swing.JLabel cap2;
    private javax.swing.JLabel cap3;
    private javax.swing.JLabel cap4;
    private javax.swing.JLabel cap5;
    private javax.swing.JLabel cap6;
    private javax.swing.JLabel cap7;
    private javax.swing.JLabel cap8;
    private javax.swing.JButton cargarPartida;
    private javax.swing.JButton creditos;
    private javax.swing.JLabel croupier;
    private javax.swing.JButton doblar;
    private javax.swing.JLabel dsplit;
    private javax.swing.JLabel empbj;
    private javax.swing.JLabel fichas;
    private javax.swing.JButton gPartida;
    private javax.swing.JLabel gmcat;
    private javax.swing.JButton guardar;
    private javax.swing.JButton hit;
    private javax.swing.JLabel incorrecto;
    private javax.swing.JLabel incorrecto1;
    private javax.swing.JButton iniPartida;
    private javax.swing.JButton insurance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea10;
    private javax.swing.JTextArea jTextArea11;
    private javax.swing.JTextArea jTextArea12;
    private javax.swing.JTextArea jTextArea13;
    private javax.swing.JTextArea jTextArea14;
    private javax.swing.JTextArea jTextArea15;
    private javax.swing.JTextArea jTextArea16;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextArea jTextArea9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton jug;
    private javax.swing.JLabel juga1;
    private javax.swing.JLabel juga2;
    private javax.swing.JLabel juga3;
    private javax.swing.JLabel juga4;
    private javax.swing.JLabel juga5;
    private javax.swing.JLabel juga6;
    private javax.swing.JLabel juga7;
    private javax.swing.JButton jugar;
    private javax.swing.JLabel labelGrido;
    private javax.swing.JLabel labelGuille;
    private javax.swing.JLabel labelJoan;
    private javax.swing.JLabel maxNfichas;
    private javax.swing.JLabel nbj;
    private javax.swing.JLabel nemp;
    private javax.swing.JTextField njug;
    private javax.swing.JLabel nsplit;
    private javax.swing.JButton nuevaPartida;
    private javax.swing.JTextField pCroup;
    private javax.swing.JButton pantallaPrincipal;
    private javax.swing.JTextField partidaGuardar;
    private javax.swing.JTextField pass;
    private javax.swing.JTextField pass1;
    private javax.swing.JLabel pcv;
    private javax.swing.JLabel pganadas;
    private javax.swing.JLabel pjugadas;
    private javax.swing.JLabel pmedia;
    private javax.swing.JPanel popupGui;
    private javax.swing.JLabel pperdidas;
    private javax.swing.JLabel primbj;
    private javax.swing.JLabel primmagan;
    private javax.swing.JLabel punt;
    private javax.swing.JLabel qbj;
    private javax.swing.JLabel qmang;
    private javax.swing.JButton ranking;
    private javax.swing.JPanel recuperarJugs;
    private javax.swing.JButton registrar2;
    private javax.swing.JButton registrarayuda;
    private javax.swing.JButton retorno;
    private javax.swing.JButton salSinG;
    private javax.swing.JButton split;
    private javax.swing.JButton stand;
    private javax.swing.JLabel sutiliz;
    private javax.swing.JLabel tach;
    private javax.swing.JLabel title;
    private javax.swing.JLabel titol;
    private javax.swing.JLabel titulo;
    private javax.swing.JTextField user;
    private javax.swing.JTextField user1;
    private javax.swing.JLabel username;
    private javax.swing.JButton usuario;
    private javax.swing.JButton volv;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables

}
